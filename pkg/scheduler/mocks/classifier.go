// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/domain"
)

// ClassifierMock is a mock implementation of scheduler.Classifier.
//
//	func TestSomethingThatUsesClassifier(t *testing.T) {
//
//		// make and configure a mocked scheduler.Classifier
//		mockedClassifier := &ClassifierMock{
//			ClassifyItemsFunc: func(ctx context.Context, items []*domain.Item, feedbacks []*domain.FeedbackExample, topics []string, preferenceSummary string) ([]*domain.Classification, error) {
//				panic("mock out the ClassifyItems method")
//			},
//			GeneratePreferenceSummaryFunc: func(ctx context.Context, feedback []*domain.FeedbackExample) (string, error) {
//				panic("mock out the GeneratePreferenceSummary method")
//			},
//			UpdatePreferenceSummaryFunc: func(ctx context.Context, currentSummary string, newFeedback []*domain.FeedbackExample) (string, error) {
//				panic("mock out the UpdatePreferenceSummary method")
//			},
//		}
//
//		// use mockedClassifier in code that requires scheduler.Classifier
//		// and then make assertions.
//
//	}
type ClassifierMock struct {
	// ClassifyItemsFunc mocks the ClassifyItems method.
	ClassifyItemsFunc func(ctx context.Context, items []*domain.Item, feedbacks []*domain.FeedbackExample, topics []string, preferenceSummary string) ([]*domain.Classification, error)

	// GeneratePreferenceSummaryFunc mocks the GeneratePreferenceSummary method.
	GeneratePreferenceSummaryFunc func(ctx context.Context, feedback []*domain.FeedbackExample) (string, error)

	// UpdatePreferenceSummaryFunc mocks the UpdatePreferenceSummary method.
	UpdatePreferenceSummaryFunc func(ctx context.Context, currentSummary string, newFeedback []*domain.FeedbackExample) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ClassifyItems holds details about calls to the ClassifyItems method.
		ClassifyItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Items is the items argument value.
			Items []*domain.Item
			// Feedbacks is the feedbacks argument value.
			Feedbacks []*domain.FeedbackExample
			// Topics is the topics argument value.
			Topics []string
			// PreferenceSummary is the preferenceSummary argument value.
			PreferenceSummary string
		}
		// GeneratePreferenceSummary holds details about calls to the GeneratePreferenceSummary method.
		GeneratePreferenceSummary []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Feedback is the feedback argument value.
			Feedback []*domain.FeedbackExample
		}
		// UpdatePreferenceSummary holds details about calls to the UpdatePreferenceSummary method.
		UpdatePreferenceSummary []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentSummary is the currentSummary argument value.
			CurrentSummary string
			// NewFeedback is the newFeedback argument value.
			NewFeedback []*domain.FeedbackExample
		}
	}
	lockClassifyItems             sync.RWMutex
	lockGeneratePreferenceSummary sync.RWMutex
	lockUpdatePreferenceSummary   sync.RWMutex
}

// ClassifyItems calls ClassifyItemsFunc.
func (mock *ClassifierMock) ClassifyItems(ctx context.Context, items []*domain.Item, feedbacks []*domain.FeedbackExample, topics []string, preferenceSummary string) ([]*domain.Classification, error) {
	if mock.ClassifyItemsFunc == nil {
		panic("ClassifierMock.ClassifyItemsFunc: method is nil but Classifier.ClassifyItems was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Items             []*domain.Item
		Feedbacks         []*domain.FeedbackExample
		Topics            []string
		PreferenceSummary string
	}{
		Ctx:               ctx,
		Items:             items,
		Feedbacks:         feedbacks,
		Topics:            topics,
		PreferenceSummary: preferenceSummary,
	}
	mock.lockClassifyItems.Lock()
	mock.calls.ClassifyItems = append(mock.calls.ClassifyItems, callInfo)
	mock.lockClassifyItems.Unlock()
	return mock.ClassifyItemsFunc(ctx, items, feedbacks, topics, preferenceSummary)
}

// ClassifyItemsCalls gets all the calls that were made to ClassifyItems.
// Check the length with:
//
//	len(mockedClassifier.ClassifyItemsCalls())
func (mock *ClassifierMock) ClassifyItemsCalls() []struct {
	Ctx               context.Context
	Items             []*domain.Item
	Feedbacks         []*domain.FeedbackExample
	Topics            []string
	PreferenceSummary string
} {
	var calls []struct {
		Ctx               context.Context
		Items             []*domain.Item
		Feedbacks         []*domain.FeedbackExample
		Topics            []string
		PreferenceSummary string
	}
	mock.lockClassifyItems.RLock()
	calls = mock.calls.ClassifyItems
	mock.lockClassifyItems.RUnlock()
	return calls
}

// GeneratePreferenceSummary calls GeneratePreferenceSummaryFunc.
func (mock *ClassifierMock) GeneratePreferenceSummary(ctx context.Context, feedback []*domain.FeedbackExample) (string, error) {
	if mock.GeneratePreferenceSummaryFunc == nil {
		panic("ClassifierMock.GeneratePreferenceSummaryFunc: method is nil but Classifier.GeneratePreferenceSummary was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Feedback []*domain.FeedbackExample
	}{
		Ctx:      ctx,
		Feedback: feedback,
	}
	mock.lockGeneratePreferenceSummary.Lock()
	mock.calls.GeneratePreferenceSummary = append(mock.calls.GeneratePreferenceSummary, callInfo)
	mock.lockGeneratePreferenceSummary.Unlock()
	return mock.GeneratePreferenceSummaryFunc(ctx, feedback)
}

// GeneratePreferenceSummaryCalls gets all the calls that were made to GeneratePreferenceSummary.
// Check the length with:
//
//	len(mockedClassifier.GeneratePreferenceSummaryCalls())
func (mock *ClassifierMock) GeneratePreferenceSummaryCalls() []struct {
	Ctx      context.Context
	Feedback []*domain.FeedbackExample
} {
	var calls []struct {
		Ctx      context.Context
		Feedback []*domain.FeedbackExample
	}
	mock.lockGeneratePreferenceSummary.RLock()
	calls = mock.calls.GeneratePreferenceSummary
	mock.lockGeneratePreferenceSummary.RUnlock()
	return calls
}

// UpdatePreferenceSummary calls UpdatePreferenceSummaryFunc.
func (mock *ClassifierMock) UpdatePreferenceSummary(ctx context.Context, currentSummary string, newFeedback []*domain.FeedbackExample) (string, error) {
	if mock.UpdatePreferenceSummaryFunc == nil {
		panic("ClassifierMock.UpdatePreferenceSummaryFunc: method is nil but Classifier.UpdatePreferenceSummary was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		CurrentSummary string
		NewFeedback    []*domain.FeedbackExample
	}{
		Ctx:            ctx,
		CurrentSummary: currentSummary,
		NewFeedback:    newFeedback,
	}
	mock.lockUpdatePreferenceSummary.Lock()
	mock.calls.UpdatePreferenceSummary = append(mock.calls.UpdatePreferenceSummary, callInfo)
	mock.lockUpdatePreferenceSummary.Unlock()
	return mock.UpdatePreferenceSummaryFunc(ctx, currentSummary, newFeedback)
}

// UpdatePreferenceSummaryCalls gets all the calls that were made to UpdatePreferenceSummary.
// Check the length with:
//
//	len(mockedClassifier.UpdatePreferenceSummaryCalls())
func (mock *ClassifierMock) UpdatePreferenceSummaryCalls() []struct {
	Ctx            context.Context
	CurrentSummary string
	NewFeedback    []*domain.FeedbackExample
} {
	var calls []struct {
		Ctx            context.Context
		CurrentSummary string
		NewFeedback    []*domain.FeedbackExample
	}
	mock.lockUpdatePreferenceSummary.RLock()
	calls = mock.calls.UpdatePreferenceSummary
	mock.lockUpdatePreferenceSummary.RUnlock()
	return calls
}
