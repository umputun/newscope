// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/db"
)

// ClassifierMock is a mock implementation of scheduler.Classifier.
//
//	func TestSomethingThatUsesClassifier(t *testing.T) {
//
//		// make and configure a mocked scheduler.Classifier
//		mockedClassifier := &ClassifierMock{
//			ClassifyArticlesFunc: func(ctx context.Context, articles []db.Item, feedbacks []db.FeedbackExample) ([]db.Classification, error) {
//				panic("mock out the ClassifyArticles method")
//			},
//		}
//
//		// use mockedClassifier in code that requires scheduler.Classifier
//		// and then make assertions.
//
//	}
type ClassifierMock struct {
	// ClassifyArticlesFunc mocks the ClassifyArticles method.
	ClassifyArticlesFunc func(ctx context.Context, articles []db.Item, feedbacks []db.FeedbackExample) ([]db.Classification, error)

	// calls tracks calls to the methods.
	calls struct {
		// ClassifyArticles holds details about calls to the ClassifyArticles method.
		ClassifyArticles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Articles is the articles argument value.
			Articles []db.Item
			// Feedbacks is the feedbacks argument value.
			Feedbacks []db.FeedbackExample
		}
	}
	lockClassifyArticles sync.RWMutex
}

// ClassifyArticles calls ClassifyArticlesFunc.
func (mock *ClassifierMock) ClassifyArticles(ctx context.Context, articles []db.Item, feedbacks []db.FeedbackExample) ([]db.Classification, error) {
	if mock.ClassifyArticlesFunc == nil {
		panic("ClassifierMock.ClassifyArticlesFunc: method is nil but Classifier.ClassifyArticles was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Articles  []db.Item
		Feedbacks []db.FeedbackExample
	}{
		Ctx:       ctx,
		Articles:  articles,
		Feedbacks: feedbacks,
	}
	mock.lockClassifyArticles.Lock()
	mock.calls.ClassifyArticles = append(mock.calls.ClassifyArticles, callInfo)
	mock.lockClassifyArticles.Unlock()
	return mock.ClassifyArticlesFunc(ctx, articles, feedbacks)
}

// ClassifyArticlesCalls gets all the calls that were made to ClassifyArticles.
// Check the length with:
//
//	len(mockedClassifier.ClassifyArticlesCalls())
func (mock *ClassifierMock) ClassifyArticlesCalls() []struct {
	Ctx       context.Context
	Articles  []db.Item
	Feedbacks []db.FeedbackExample
} {
	var calls []struct {
		Ctx       context.Context
		Articles  []db.Item
		Feedbacks []db.FeedbackExample
	}
	mock.lockClassifyArticles.RLock()
	calls = mock.calls.ClassifyArticles
	mock.lockClassifyArticles.RUnlock()
	return calls
}
