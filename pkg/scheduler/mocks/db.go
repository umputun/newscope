// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"time"

	"github.com/umputun/newscope/pkg/db"
)

// DatabaseMock is a mock implementation of scheduler.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked scheduler.Database
//		mockedDatabase := &DatabaseMock{
//			CreateItemFunc: func(ctx context.Context, item *db.Item) error {
//				panic("mock out the CreateItem method")
//			},
//			GetFeedFunc: func(ctx context.Context, id int64) (*db.Feed, error) {
//				panic("mock out the GetFeed method")
//			},
//			GetFeedbackCountFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetFeedbackCount method")
//			},
//			GetFeedbackSinceFunc: func(ctx context.Context, offset int64, limit int) ([]db.FeedbackExample, error) {
//				panic("mock out the GetFeedbackSince method")
//			},
//			GetFeedsFunc: func(ctx context.Context, enabledOnly bool) ([]db.Feed, error) {
//				panic("mock out the GetFeeds method")
//			},
//			GetItemFunc: func(ctx context.Context, id int64) (*db.Item, error) {
//				panic("mock out the GetItem method")
//			},
//			GetRecentFeedbackFunc: func(ctx context.Context, feedbackType string, limit int) ([]db.FeedbackExample, error) {
//				panic("mock out the GetRecentFeedback method")
//			},
//			GetSettingFunc: func(ctx context.Context, key string) (string, error) {
//				panic("mock out the GetSetting method")
//			},
//			GetTopicsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetTopics method")
//			},
//			ItemExistsFunc: func(ctx context.Context, feedID int64, guid string) (bool, error) {
//				panic("mock out the ItemExists method")
//			},
//			ItemExistsByTitleOrURLFunc: func(ctx context.Context, title string, url string) (bool, error) {
//				panic("mock out the ItemExistsByTitleOrURL method")
//			},
//			SetSettingFunc: func(ctx context.Context, key string, value string) error {
//				panic("mock out the SetSetting method")
//			},
//			UpdateFeedErrorFunc: func(ctx context.Context, feedID int64, errMsg string) error {
//				panic("mock out the UpdateFeedError method")
//			},
//			UpdateFeedFetchedFunc: func(ctx context.Context, feedID int64, nextFetch time.Time) error {
//				panic("mock out the UpdateFeedFetched method")
//			},
//			UpdateItemExtractionFunc: func(ctx context.Context, itemID int64, content string, richContent string, err error) error {
//				panic("mock out the UpdateItemExtraction method")
//			},
//			UpdateItemProcessedFunc: func(ctx context.Context, itemID int64, content string, richContent string, classification db.Classification) error {
//				panic("mock out the UpdateItemProcessed method")
//			},
//		}
//
//		// use mockedDatabase in code that requires scheduler.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// CreateItemFunc mocks the CreateItem method.
	CreateItemFunc func(ctx context.Context, item *db.Item) error

	// GetFeedFunc mocks the GetFeed method.
	GetFeedFunc func(ctx context.Context, id int64) (*db.Feed, error)

	// GetFeedbackCountFunc mocks the GetFeedbackCount method.
	GetFeedbackCountFunc func(ctx context.Context) (int64, error)

	// GetFeedbackSinceFunc mocks the GetFeedbackSince method.
	GetFeedbackSinceFunc func(ctx context.Context, offset int64, limit int) ([]db.FeedbackExample, error)

	// GetFeedsFunc mocks the GetFeeds method.
	GetFeedsFunc func(ctx context.Context, enabledOnly bool) ([]db.Feed, error)

	// GetItemFunc mocks the GetItem method.
	GetItemFunc func(ctx context.Context, id int64) (*db.Item, error)

	// GetRecentFeedbackFunc mocks the GetRecentFeedback method.
	GetRecentFeedbackFunc func(ctx context.Context, feedbackType string, limit int) ([]db.FeedbackExample, error)

	// GetSettingFunc mocks the GetSetting method.
	GetSettingFunc func(ctx context.Context, key string) (string, error)

	// GetTopicsFunc mocks the GetTopics method.
	GetTopicsFunc func(ctx context.Context) ([]string, error)

	// ItemExistsFunc mocks the ItemExists method.
	ItemExistsFunc func(ctx context.Context, feedID int64, guid string) (bool, error)

	// ItemExistsByTitleOrURLFunc mocks the ItemExistsByTitleOrURL method.
	ItemExistsByTitleOrURLFunc func(ctx context.Context, title string, url string) (bool, error)

	// SetSettingFunc mocks the SetSetting method.
	SetSettingFunc func(ctx context.Context, key string, value string) error

	// UpdateFeedErrorFunc mocks the UpdateFeedError method.
	UpdateFeedErrorFunc func(ctx context.Context, feedID int64, errMsg string) error

	// UpdateFeedFetchedFunc mocks the UpdateFeedFetched method.
	UpdateFeedFetchedFunc func(ctx context.Context, feedID int64, nextFetch time.Time) error

	// UpdateItemExtractionFunc mocks the UpdateItemExtraction method.
	UpdateItemExtractionFunc func(ctx context.Context, itemID int64, content string, richContent string, err error) error

	// UpdateItemProcessedFunc mocks the UpdateItemProcessed method.
	UpdateItemProcessedFunc func(ctx context.Context, itemID int64, content string, richContent string, classification db.Classification) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateItem holds details about calls to the CreateItem method.
		CreateItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Item is the item argument value.
			Item *db.Item
		}
		// GetFeed holds details about calls to the GetFeed method.
		GetFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetFeedbackCount holds details about calls to the GetFeedbackCount method.
		GetFeedbackCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetFeedbackSince holds details about calls to the GetFeedbackSince method.
		GetFeedbackSince []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int64
			// Limit is the limit argument value.
			Limit int
		}
		// GetFeeds holds details about calls to the GetFeeds method.
		GetFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EnabledOnly is the enabledOnly argument value.
			EnabledOnly bool
		}
		// GetItem holds details about calls to the GetItem method.
		GetItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetRecentFeedback holds details about calls to the GetRecentFeedback method.
		GetRecentFeedback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedbackType is the feedbackType argument value.
			FeedbackType string
			// Limit is the limit argument value.
			Limit int
		}
		// GetSetting holds details about calls to the GetSetting method.
		GetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// GetTopics holds details about calls to the GetTopics method.
		GetTopics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ItemExists holds details about calls to the ItemExists method.
		ItemExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// GUID is the guid argument value.
			GUID string
		}
		// ItemExistsByTitleOrURL holds details about calls to the ItemExistsByTitleOrURL method.
		ItemExistsByTitleOrURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
			// URL is the url argument value.
			URL string
		}
		// SetSetting holds details about calls to the SetSetting method.
		SetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
		}
		// UpdateFeedError holds details about calls to the UpdateFeedError method.
		UpdateFeedError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// ErrMsg is the errMsg argument value.
			ErrMsg string
		}
		// UpdateFeedFetched holds details about calls to the UpdateFeedFetched method.
		UpdateFeedFetched []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// NextFetch is the nextFetch argument value.
			NextFetch time.Time
		}
		// UpdateItemExtraction holds details about calls to the UpdateItemExtraction method.
		UpdateItemExtraction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
			// Content is the content argument value.
			Content string
			// RichContent is the richContent argument value.
			RichContent string
			// Err is the err argument value.
			Err error
		}
		// UpdateItemProcessed holds details about calls to the UpdateItemProcessed method.
		UpdateItemProcessed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
			// Content is the content argument value.
			Content string
			// RichContent is the richContent argument value.
			RichContent string
			// Classification is the classification argument value.
			Classification db.Classification
		}
	}
	lockCreateItem             sync.RWMutex
	lockGetFeed                sync.RWMutex
	lockGetFeedbackCount       sync.RWMutex
	lockGetFeedbackSince       sync.RWMutex
	lockGetFeeds               sync.RWMutex
	lockGetItem                sync.RWMutex
	lockGetRecentFeedback      sync.RWMutex
	lockGetSetting             sync.RWMutex
	lockGetTopics              sync.RWMutex
	lockItemExists             sync.RWMutex
	lockItemExistsByTitleOrURL sync.RWMutex
	lockSetSetting             sync.RWMutex
	lockUpdateFeedError        sync.RWMutex
	lockUpdateFeedFetched      sync.RWMutex
	lockUpdateItemExtraction   sync.RWMutex
	lockUpdateItemProcessed    sync.RWMutex
}

// CreateItem calls CreateItemFunc.
func (mock *DatabaseMock) CreateItem(ctx context.Context, item *db.Item) error {
	if mock.CreateItemFunc == nil {
		panic("DatabaseMock.CreateItemFunc: method is nil but Database.CreateItem was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Item *db.Item
	}{
		Ctx:  ctx,
		Item: item,
	}
	mock.lockCreateItem.Lock()
	mock.calls.CreateItem = append(mock.calls.CreateItem, callInfo)
	mock.lockCreateItem.Unlock()
	return mock.CreateItemFunc(ctx, item)
}

// CreateItemCalls gets all the calls that were made to CreateItem.
// Check the length with:
//
//	len(mockedDatabase.CreateItemCalls())
func (mock *DatabaseMock) CreateItemCalls() []struct {
	Ctx  context.Context
	Item *db.Item
} {
	var calls []struct {
		Ctx  context.Context
		Item *db.Item
	}
	mock.lockCreateItem.RLock()
	calls = mock.calls.CreateItem
	mock.lockCreateItem.RUnlock()
	return calls
}

// GetFeed calls GetFeedFunc.
func (mock *DatabaseMock) GetFeed(ctx context.Context, id int64) (*db.Feed, error) {
	if mock.GetFeedFunc == nil {
		panic("DatabaseMock.GetFeedFunc: method is nil but Database.GetFeed was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetFeed.Lock()
	mock.calls.GetFeed = append(mock.calls.GetFeed, callInfo)
	mock.lockGetFeed.Unlock()
	return mock.GetFeedFunc(ctx, id)
}

// GetFeedCalls gets all the calls that were made to GetFeed.
// Check the length with:
//
//	len(mockedDatabase.GetFeedCalls())
func (mock *DatabaseMock) GetFeedCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetFeed.RLock()
	calls = mock.calls.GetFeed
	mock.lockGetFeed.RUnlock()
	return calls
}

// GetFeedbackCount calls GetFeedbackCountFunc.
func (mock *DatabaseMock) GetFeedbackCount(ctx context.Context) (int64, error) {
	if mock.GetFeedbackCountFunc == nil {
		panic("DatabaseMock.GetFeedbackCountFunc: method is nil but Database.GetFeedbackCount was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetFeedbackCount.Lock()
	mock.calls.GetFeedbackCount = append(mock.calls.GetFeedbackCount, callInfo)
	mock.lockGetFeedbackCount.Unlock()
	return mock.GetFeedbackCountFunc(ctx)
}

// GetFeedbackCountCalls gets all the calls that were made to GetFeedbackCount.
// Check the length with:
//
//	len(mockedDatabase.GetFeedbackCountCalls())
func (mock *DatabaseMock) GetFeedbackCountCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetFeedbackCount.RLock()
	calls = mock.calls.GetFeedbackCount
	mock.lockGetFeedbackCount.RUnlock()
	return calls
}

// GetFeedbackSince calls GetFeedbackSinceFunc.
func (mock *DatabaseMock) GetFeedbackSince(ctx context.Context, offset int64, limit int) ([]db.FeedbackExample, error) {
	if mock.GetFeedbackSinceFunc == nil {
		panic("DatabaseMock.GetFeedbackSinceFunc: method is nil but Database.GetFeedbackSince was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Offset int64
		Limit  int
	}{
		Ctx:    ctx,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetFeedbackSince.Lock()
	mock.calls.GetFeedbackSince = append(mock.calls.GetFeedbackSince, callInfo)
	mock.lockGetFeedbackSince.Unlock()
	return mock.GetFeedbackSinceFunc(ctx, offset, limit)
}

// GetFeedbackSinceCalls gets all the calls that were made to GetFeedbackSince.
// Check the length with:
//
//	len(mockedDatabase.GetFeedbackSinceCalls())
func (mock *DatabaseMock) GetFeedbackSinceCalls() []struct {
	Ctx    context.Context
	Offset int64
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		Offset int64
		Limit  int
	}
	mock.lockGetFeedbackSince.RLock()
	calls = mock.calls.GetFeedbackSince
	mock.lockGetFeedbackSince.RUnlock()
	return calls
}

// GetFeeds calls GetFeedsFunc.
func (mock *DatabaseMock) GetFeeds(ctx context.Context, enabledOnly bool) ([]db.Feed, error) {
	if mock.GetFeedsFunc == nil {
		panic("DatabaseMock.GetFeedsFunc: method is nil but Database.GetFeeds was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EnabledOnly bool
	}{
		Ctx:         ctx,
		EnabledOnly: enabledOnly,
	}
	mock.lockGetFeeds.Lock()
	mock.calls.GetFeeds = append(mock.calls.GetFeeds, callInfo)
	mock.lockGetFeeds.Unlock()
	return mock.GetFeedsFunc(ctx, enabledOnly)
}

// GetFeedsCalls gets all the calls that were made to GetFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetFeedsCalls())
func (mock *DatabaseMock) GetFeedsCalls() []struct {
	Ctx         context.Context
	EnabledOnly bool
} {
	var calls []struct {
		Ctx         context.Context
		EnabledOnly bool
	}
	mock.lockGetFeeds.RLock()
	calls = mock.calls.GetFeeds
	mock.lockGetFeeds.RUnlock()
	return calls
}

// GetItem calls GetItemFunc.
func (mock *DatabaseMock) GetItem(ctx context.Context, id int64) (*db.Item, error) {
	if mock.GetItemFunc == nil {
		panic("DatabaseMock.GetItemFunc: method is nil but Database.GetItem was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetItem.Lock()
	mock.calls.GetItem = append(mock.calls.GetItem, callInfo)
	mock.lockGetItem.Unlock()
	return mock.GetItemFunc(ctx, id)
}

// GetItemCalls gets all the calls that were made to GetItem.
// Check the length with:
//
//	len(mockedDatabase.GetItemCalls())
func (mock *DatabaseMock) GetItemCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetItem.RLock()
	calls = mock.calls.GetItem
	mock.lockGetItem.RUnlock()
	return calls
}

// GetRecentFeedback calls GetRecentFeedbackFunc.
func (mock *DatabaseMock) GetRecentFeedback(ctx context.Context, feedbackType string, limit int) ([]db.FeedbackExample, error) {
	if mock.GetRecentFeedbackFunc == nil {
		panic("DatabaseMock.GetRecentFeedbackFunc: method is nil but Database.GetRecentFeedback was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		FeedbackType string
		Limit        int
	}{
		Ctx:          ctx,
		FeedbackType: feedbackType,
		Limit:        limit,
	}
	mock.lockGetRecentFeedback.Lock()
	mock.calls.GetRecentFeedback = append(mock.calls.GetRecentFeedback, callInfo)
	mock.lockGetRecentFeedback.Unlock()
	return mock.GetRecentFeedbackFunc(ctx, feedbackType, limit)
}

// GetRecentFeedbackCalls gets all the calls that were made to GetRecentFeedback.
// Check the length with:
//
//	len(mockedDatabase.GetRecentFeedbackCalls())
func (mock *DatabaseMock) GetRecentFeedbackCalls() []struct {
	Ctx          context.Context
	FeedbackType string
	Limit        int
} {
	var calls []struct {
		Ctx          context.Context
		FeedbackType string
		Limit        int
	}
	mock.lockGetRecentFeedback.RLock()
	calls = mock.calls.GetRecentFeedback
	mock.lockGetRecentFeedback.RUnlock()
	return calls
}

// GetSetting calls GetSettingFunc.
func (mock *DatabaseMock) GetSetting(ctx context.Context, key string) (string, error) {
	if mock.GetSettingFunc == nil {
		panic("DatabaseMock.GetSettingFunc: method is nil but Database.GetSetting was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetSetting.Lock()
	mock.calls.GetSetting = append(mock.calls.GetSetting, callInfo)
	mock.lockGetSetting.Unlock()
	return mock.GetSettingFunc(ctx, key)
}

// GetSettingCalls gets all the calls that were made to GetSetting.
// Check the length with:
//
//	len(mockedDatabase.GetSettingCalls())
func (mock *DatabaseMock) GetSettingCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetSetting.RLock()
	calls = mock.calls.GetSetting
	mock.lockGetSetting.RUnlock()
	return calls
}

// GetTopics calls GetTopicsFunc.
func (mock *DatabaseMock) GetTopics(ctx context.Context) ([]string, error) {
	if mock.GetTopicsFunc == nil {
		panic("DatabaseMock.GetTopicsFunc: method is nil but Database.GetTopics was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTopics.Lock()
	mock.calls.GetTopics = append(mock.calls.GetTopics, callInfo)
	mock.lockGetTopics.Unlock()
	return mock.GetTopicsFunc(ctx)
}

// GetTopicsCalls gets all the calls that were made to GetTopics.
// Check the length with:
//
//	len(mockedDatabase.GetTopicsCalls())
func (mock *DatabaseMock) GetTopicsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTopics.RLock()
	calls = mock.calls.GetTopics
	mock.lockGetTopics.RUnlock()
	return calls
}

// ItemExists calls ItemExistsFunc.
func (mock *DatabaseMock) ItemExists(ctx context.Context, feedID int64, guid string) (bool, error) {
	if mock.ItemExistsFunc == nil {
		panic("DatabaseMock.ItemExistsFunc: method is nil but Database.ItemExists was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
		GUID   string
	}{
		Ctx:    ctx,
		FeedID: feedID,
		GUID:   guid,
	}
	mock.lockItemExists.Lock()
	mock.calls.ItemExists = append(mock.calls.ItemExists, callInfo)
	mock.lockItemExists.Unlock()
	return mock.ItemExistsFunc(ctx, feedID, guid)
}

// ItemExistsCalls gets all the calls that were made to ItemExists.
// Check the length with:
//
//	len(mockedDatabase.ItemExistsCalls())
func (mock *DatabaseMock) ItemExistsCalls() []struct {
	Ctx    context.Context
	FeedID int64
	GUID   string
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
		GUID   string
	}
	mock.lockItemExists.RLock()
	calls = mock.calls.ItemExists
	mock.lockItemExists.RUnlock()
	return calls
}

// ItemExistsByTitleOrURL calls ItemExistsByTitleOrURLFunc.
func (mock *DatabaseMock) ItemExistsByTitleOrURL(ctx context.Context, title string, url string) (bool, error) {
	if mock.ItemExistsByTitleOrURLFunc == nil {
		panic("DatabaseMock.ItemExistsByTitleOrURLFunc: method is nil but Database.ItemExistsByTitleOrURL was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Title string
		URL   string
	}{
		Ctx:   ctx,
		Title: title,
		URL:   url,
	}
	mock.lockItemExistsByTitleOrURL.Lock()
	mock.calls.ItemExistsByTitleOrURL = append(mock.calls.ItemExistsByTitleOrURL, callInfo)
	mock.lockItemExistsByTitleOrURL.Unlock()
	return mock.ItemExistsByTitleOrURLFunc(ctx, title, url)
}

// ItemExistsByTitleOrURLCalls gets all the calls that were made to ItemExistsByTitleOrURL.
// Check the length with:
//
//	len(mockedDatabase.ItemExistsByTitleOrURLCalls())
func (mock *DatabaseMock) ItemExistsByTitleOrURLCalls() []struct {
	Ctx   context.Context
	Title string
	URL   string
} {
	var calls []struct {
		Ctx   context.Context
		Title string
		URL   string
	}
	mock.lockItemExistsByTitleOrURL.RLock()
	calls = mock.calls.ItemExistsByTitleOrURL
	mock.lockItemExistsByTitleOrURL.RUnlock()
	return calls
}

// SetSetting calls SetSettingFunc.
func (mock *DatabaseMock) SetSetting(ctx context.Context, key string, value string) error {
	if mock.SetSettingFunc == nil {
		panic("DatabaseMock.SetSettingFunc: method is nil but Database.SetSetting was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Value string
	}{
		Ctx:   ctx,
		Key:   key,
		Value: value,
	}
	mock.lockSetSetting.Lock()
	mock.calls.SetSetting = append(mock.calls.SetSetting, callInfo)
	mock.lockSetSetting.Unlock()
	return mock.SetSettingFunc(ctx, key, value)
}

// SetSettingCalls gets all the calls that were made to SetSetting.
// Check the length with:
//
//	len(mockedDatabase.SetSettingCalls())
func (mock *DatabaseMock) SetSettingCalls() []struct {
	Ctx   context.Context
	Key   string
	Value string
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Value string
	}
	mock.lockSetSetting.RLock()
	calls = mock.calls.SetSetting
	mock.lockSetSetting.RUnlock()
	return calls
}

// UpdateFeedError calls UpdateFeedErrorFunc.
func (mock *DatabaseMock) UpdateFeedError(ctx context.Context, feedID int64, errMsg string) error {
	if mock.UpdateFeedErrorFunc == nil {
		panic("DatabaseMock.UpdateFeedErrorFunc: method is nil but Database.UpdateFeedError was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
		ErrMsg string
	}{
		Ctx:    ctx,
		FeedID: feedID,
		ErrMsg: errMsg,
	}
	mock.lockUpdateFeedError.Lock()
	mock.calls.UpdateFeedError = append(mock.calls.UpdateFeedError, callInfo)
	mock.lockUpdateFeedError.Unlock()
	return mock.UpdateFeedErrorFunc(ctx, feedID, errMsg)
}

// UpdateFeedErrorCalls gets all the calls that were made to UpdateFeedError.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedErrorCalls())
func (mock *DatabaseMock) UpdateFeedErrorCalls() []struct {
	Ctx    context.Context
	FeedID int64
	ErrMsg string
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
		ErrMsg string
	}
	mock.lockUpdateFeedError.RLock()
	calls = mock.calls.UpdateFeedError
	mock.lockUpdateFeedError.RUnlock()
	return calls
}

// UpdateFeedFetched calls UpdateFeedFetchedFunc.
func (mock *DatabaseMock) UpdateFeedFetched(ctx context.Context, feedID int64, nextFetch time.Time) error {
	if mock.UpdateFeedFetchedFunc == nil {
		panic("DatabaseMock.UpdateFeedFetchedFunc: method is nil but Database.UpdateFeedFetched was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		FeedID    int64
		NextFetch time.Time
	}{
		Ctx:       ctx,
		FeedID:    feedID,
		NextFetch: nextFetch,
	}
	mock.lockUpdateFeedFetched.Lock()
	mock.calls.UpdateFeedFetched = append(mock.calls.UpdateFeedFetched, callInfo)
	mock.lockUpdateFeedFetched.Unlock()
	return mock.UpdateFeedFetchedFunc(ctx, feedID, nextFetch)
}

// UpdateFeedFetchedCalls gets all the calls that were made to UpdateFeedFetched.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedFetchedCalls())
func (mock *DatabaseMock) UpdateFeedFetchedCalls() []struct {
	Ctx       context.Context
	FeedID    int64
	NextFetch time.Time
} {
	var calls []struct {
		Ctx       context.Context
		FeedID    int64
		NextFetch time.Time
	}
	mock.lockUpdateFeedFetched.RLock()
	calls = mock.calls.UpdateFeedFetched
	mock.lockUpdateFeedFetched.RUnlock()
	return calls
}

// UpdateItemExtraction calls UpdateItemExtractionFunc.
func (mock *DatabaseMock) UpdateItemExtraction(ctx context.Context, itemID int64, content string, richContent string, err error) error {
	if mock.UpdateItemExtractionFunc == nil {
		panic("DatabaseMock.UpdateItemExtractionFunc: method is nil but Database.UpdateItemExtraction was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ItemID      int64
		Content     string
		RichContent string
		Err         error
	}{
		Ctx:         ctx,
		ItemID:      itemID,
		Content:     content,
		RichContent: richContent,
		Err:         err,
	}
	mock.lockUpdateItemExtraction.Lock()
	mock.calls.UpdateItemExtraction = append(mock.calls.UpdateItemExtraction, callInfo)
	mock.lockUpdateItemExtraction.Unlock()
	return mock.UpdateItemExtractionFunc(ctx, itemID, content, richContent, err)
}

// UpdateItemExtractionCalls gets all the calls that were made to UpdateItemExtraction.
// Check the length with:
//
//	len(mockedDatabase.UpdateItemExtractionCalls())
func (mock *DatabaseMock) UpdateItemExtractionCalls() []struct {
	Ctx         context.Context
	ItemID      int64
	Content     string
	RichContent string
	Err         error
} {
	var calls []struct {
		Ctx         context.Context
		ItemID      int64
		Content     string
		RichContent string
		Err         error
	}
	mock.lockUpdateItemExtraction.RLock()
	calls = mock.calls.UpdateItemExtraction
	mock.lockUpdateItemExtraction.RUnlock()
	return calls
}

// UpdateItemProcessed calls UpdateItemProcessedFunc.
func (mock *DatabaseMock) UpdateItemProcessed(ctx context.Context, itemID int64, content string, richContent string, classification db.Classification) error {
	if mock.UpdateItemProcessedFunc == nil {
		panic("DatabaseMock.UpdateItemProcessedFunc: method is nil but Database.UpdateItemProcessed was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ItemID         int64
		Content        string
		RichContent    string
		Classification db.Classification
	}{
		Ctx:            ctx,
		ItemID:         itemID,
		Content:        content,
		RichContent:    richContent,
		Classification: classification,
	}
	mock.lockUpdateItemProcessed.Lock()
	mock.calls.UpdateItemProcessed = append(mock.calls.UpdateItemProcessed, callInfo)
	mock.lockUpdateItemProcessed.Unlock()
	return mock.UpdateItemProcessedFunc(ctx, itemID, content, richContent, classification)
}

// UpdateItemProcessedCalls gets all the calls that were made to UpdateItemProcessed.
// Check the length with:
//
//	len(mockedDatabase.UpdateItemProcessedCalls())
func (mock *DatabaseMock) UpdateItemProcessedCalls() []struct {
	Ctx            context.Context
	ItemID         int64
	Content        string
	RichContent    string
	Classification db.Classification
} {
	var calls []struct {
		Ctx            context.Context
		ItemID         int64
		Content        string
		RichContent    string
		Classification db.Classification
	}
	mock.lockUpdateItemProcessed.RLock()
	calls = mock.calls.UpdateItemProcessed
	mock.lockUpdateItemProcessed.RUnlock()
	return calls
}
