// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"time"

	"github.com/umputun/newscope/pkg/db"
)

// DatabaseMock is a mock implementation of scheduler.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked scheduler.Database
//		mockedDatabase := &DatabaseMock{
//			CreateContentFunc: func(ctx context.Context, content *db.Content) error {
//				panic("mock out the CreateContent method")
//			},
//			CreateItemFunc: func(ctx context.Context, item *db.Item) error {
//				panic("mock out the CreateItem method")
//			},
//			GetEnabledFeedsFunc: func(ctx context.Context) ([]db.Feed, error) {
//				panic("mock out the GetEnabledFeeds method")
//			},
//			GetFeedFunc: func(ctx context.Context, id int64) (*db.Feed, error) {
//				panic("mock out the GetFeed method")
//			},
//			GetItemFunc: func(ctx context.Context, id int64) (*db.Item, error) {
//				panic("mock out the GetItem method")
//			},
//			GetItemsForExtractionFunc: func(ctx context.Context, limit int) ([]db.Item, error) {
//				panic("mock out the GetItemsForExtraction method")
//			},
//			UpdateFeedFunc: func(ctx context.Context, feed *db.Feed) error {
//				panic("mock out the UpdateFeed method")
//			},
//			UpdateFeedErrorFunc: func(ctx context.Context, feedID int64, errMsg string) error {
//				panic("mock out the UpdateFeedError method")
//			},
//			UpdateFeedLastFetchedFunc: func(ctx context.Context, feedID int64, lastFetched time.Time) error {
//				panic("mock out the UpdateFeedLastFetched method")
//			},
//		}
//
//		// use mockedDatabase in code that requires scheduler.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// CreateContentFunc mocks the CreateContent method.
	CreateContentFunc func(ctx context.Context, content *db.Content) error

	// CreateItemFunc mocks the CreateItem method.
	CreateItemFunc func(ctx context.Context, item *db.Item) error

	// GetEnabledFeedsFunc mocks the GetEnabledFeeds method.
	GetEnabledFeedsFunc func(ctx context.Context) ([]db.Feed, error)

	// GetFeedFunc mocks the GetFeed method.
	GetFeedFunc func(ctx context.Context, id int64) (*db.Feed, error)

	// GetItemFunc mocks the GetItem method.
	GetItemFunc func(ctx context.Context, id int64) (*db.Item, error)

	// GetItemsForExtractionFunc mocks the GetItemsForExtraction method.
	GetItemsForExtractionFunc func(ctx context.Context, limit int) ([]db.Item, error)

	// UpdateFeedFunc mocks the UpdateFeed method.
	UpdateFeedFunc func(ctx context.Context, feed *db.Feed) error

	// UpdateFeedErrorFunc mocks the UpdateFeedError method.
	UpdateFeedErrorFunc func(ctx context.Context, feedID int64, errMsg string) error

	// UpdateFeedLastFetchedFunc mocks the UpdateFeedLastFetched method.
	UpdateFeedLastFetchedFunc func(ctx context.Context, feedID int64, lastFetched time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateContent holds details about calls to the CreateContent method.
		CreateContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Content is the content argument value.
			Content *db.Content
		}
		// CreateItem holds details about calls to the CreateItem method.
		CreateItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Item is the item argument value.
			Item *db.Item
		}
		// GetEnabledFeeds holds details about calls to the GetEnabledFeeds method.
		GetEnabledFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetFeed holds details about calls to the GetFeed method.
		GetFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetItem holds details about calls to the GetItem method.
		GetItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetItemsForExtraction holds details about calls to the GetItemsForExtraction method.
		GetItemsForExtraction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
		}
		// UpdateFeed holds details about calls to the UpdateFeed method.
		UpdateFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Feed is the feed argument value.
			Feed *db.Feed
		}
		// UpdateFeedError holds details about calls to the UpdateFeedError method.
		UpdateFeedError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// ErrMsg is the errMsg argument value.
			ErrMsg string
		}
		// UpdateFeedLastFetched holds details about calls to the UpdateFeedLastFetched method.
		UpdateFeedLastFetched []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// LastFetched is the lastFetched argument value.
			LastFetched time.Time
		}
	}
	lockCreateContent         sync.RWMutex
	lockCreateItem            sync.RWMutex
	lockGetEnabledFeeds       sync.RWMutex
	lockGetFeed               sync.RWMutex
	lockGetItem               sync.RWMutex
	lockGetItemsForExtraction sync.RWMutex
	lockUpdateFeed            sync.RWMutex
	lockUpdateFeedError       sync.RWMutex
	lockUpdateFeedLastFetched sync.RWMutex
}

// CreateContent calls CreateContentFunc.
func (mock *DatabaseMock) CreateContent(ctx context.Context, content *db.Content) error {
	if mock.CreateContentFunc == nil {
		panic("DatabaseMock.CreateContentFunc: method is nil but Database.CreateContent was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Content *db.Content
	}{
		Ctx:     ctx,
		Content: content,
	}
	mock.lockCreateContent.Lock()
	mock.calls.CreateContent = append(mock.calls.CreateContent, callInfo)
	mock.lockCreateContent.Unlock()
	return mock.CreateContentFunc(ctx, content)
}

// CreateContentCalls gets all the calls that were made to CreateContent.
// Check the length with:
//
//	len(mockedDatabase.CreateContentCalls())
func (mock *DatabaseMock) CreateContentCalls() []struct {
	Ctx     context.Context
	Content *db.Content
} {
	var calls []struct {
		Ctx     context.Context
		Content *db.Content
	}
	mock.lockCreateContent.RLock()
	calls = mock.calls.CreateContent
	mock.lockCreateContent.RUnlock()
	return calls
}

// CreateItem calls CreateItemFunc.
func (mock *DatabaseMock) CreateItem(ctx context.Context, item *db.Item) error {
	if mock.CreateItemFunc == nil {
		panic("DatabaseMock.CreateItemFunc: method is nil but Database.CreateItem was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Item *db.Item
	}{
		Ctx:  ctx,
		Item: item,
	}
	mock.lockCreateItem.Lock()
	mock.calls.CreateItem = append(mock.calls.CreateItem, callInfo)
	mock.lockCreateItem.Unlock()
	return mock.CreateItemFunc(ctx, item)
}

// CreateItemCalls gets all the calls that were made to CreateItem.
// Check the length with:
//
//	len(mockedDatabase.CreateItemCalls())
func (mock *DatabaseMock) CreateItemCalls() []struct {
	Ctx  context.Context
	Item *db.Item
} {
	var calls []struct {
		Ctx  context.Context
		Item *db.Item
	}
	mock.lockCreateItem.RLock()
	calls = mock.calls.CreateItem
	mock.lockCreateItem.RUnlock()
	return calls
}

// GetEnabledFeeds calls GetEnabledFeedsFunc.
func (mock *DatabaseMock) GetEnabledFeeds(ctx context.Context) ([]db.Feed, error) {
	if mock.GetEnabledFeedsFunc == nil {
		panic("DatabaseMock.GetEnabledFeedsFunc: method is nil but Database.GetEnabledFeeds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetEnabledFeeds.Lock()
	mock.calls.GetEnabledFeeds = append(mock.calls.GetEnabledFeeds, callInfo)
	mock.lockGetEnabledFeeds.Unlock()
	return mock.GetEnabledFeedsFunc(ctx)
}

// GetEnabledFeedsCalls gets all the calls that were made to GetEnabledFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetEnabledFeedsCalls())
func (mock *DatabaseMock) GetEnabledFeedsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetEnabledFeeds.RLock()
	calls = mock.calls.GetEnabledFeeds
	mock.lockGetEnabledFeeds.RUnlock()
	return calls
}

// GetFeed calls GetFeedFunc.
func (mock *DatabaseMock) GetFeed(ctx context.Context, id int64) (*db.Feed, error) {
	if mock.GetFeedFunc == nil {
		panic("DatabaseMock.GetFeedFunc: method is nil but Database.GetFeed was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetFeed.Lock()
	mock.calls.GetFeed = append(mock.calls.GetFeed, callInfo)
	mock.lockGetFeed.Unlock()
	return mock.GetFeedFunc(ctx, id)
}

// GetFeedCalls gets all the calls that were made to GetFeed.
// Check the length with:
//
//	len(mockedDatabase.GetFeedCalls())
func (mock *DatabaseMock) GetFeedCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetFeed.RLock()
	calls = mock.calls.GetFeed
	mock.lockGetFeed.RUnlock()
	return calls
}

// GetItem calls GetItemFunc.
func (mock *DatabaseMock) GetItem(ctx context.Context, id int64) (*db.Item, error) {
	if mock.GetItemFunc == nil {
		panic("DatabaseMock.GetItemFunc: method is nil but Database.GetItem was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetItem.Lock()
	mock.calls.GetItem = append(mock.calls.GetItem, callInfo)
	mock.lockGetItem.Unlock()
	return mock.GetItemFunc(ctx, id)
}

// GetItemCalls gets all the calls that were made to GetItem.
// Check the length with:
//
//	len(mockedDatabase.GetItemCalls())
func (mock *DatabaseMock) GetItemCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetItem.RLock()
	calls = mock.calls.GetItem
	mock.lockGetItem.RUnlock()
	return calls
}

// GetItemsForExtraction calls GetItemsForExtractionFunc.
func (mock *DatabaseMock) GetItemsForExtraction(ctx context.Context, limit int) ([]db.Item, error) {
	if mock.GetItemsForExtractionFunc == nil {
		panic("DatabaseMock.GetItemsForExtractionFunc: method is nil but Database.GetItemsForExtraction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit int
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetItemsForExtraction.Lock()
	mock.calls.GetItemsForExtraction = append(mock.calls.GetItemsForExtraction, callInfo)
	mock.lockGetItemsForExtraction.Unlock()
	return mock.GetItemsForExtractionFunc(ctx, limit)
}

// GetItemsForExtractionCalls gets all the calls that were made to GetItemsForExtraction.
// Check the length with:
//
//	len(mockedDatabase.GetItemsForExtractionCalls())
func (mock *DatabaseMock) GetItemsForExtractionCalls() []struct {
	Ctx   context.Context
	Limit int
} {
	var calls []struct {
		Ctx   context.Context
		Limit int
	}
	mock.lockGetItemsForExtraction.RLock()
	calls = mock.calls.GetItemsForExtraction
	mock.lockGetItemsForExtraction.RUnlock()
	return calls
}

// UpdateFeed calls UpdateFeedFunc.
func (mock *DatabaseMock) UpdateFeed(ctx context.Context, feed *db.Feed) error {
	if mock.UpdateFeedFunc == nil {
		panic("DatabaseMock.UpdateFeedFunc: method is nil but Database.UpdateFeed was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Feed *db.Feed
	}{
		Ctx:  ctx,
		Feed: feed,
	}
	mock.lockUpdateFeed.Lock()
	mock.calls.UpdateFeed = append(mock.calls.UpdateFeed, callInfo)
	mock.lockUpdateFeed.Unlock()
	return mock.UpdateFeedFunc(ctx, feed)
}

// UpdateFeedCalls gets all the calls that were made to UpdateFeed.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedCalls())
func (mock *DatabaseMock) UpdateFeedCalls() []struct {
	Ctx  context.Context
	Feed *db.Feed
} {
	var calls []struct {
		Ctx  context.Context
		Feed *db.Feed
	}
	mock.lockUpdateFeed.RLock()
	calls = mock.calls.UpdateFeed
	mock.lockUpdateFeed.RUnlock()
	return calls
}

// UpdateFeedError calls UpdateFeedErrorFunc.
func (mock *DatabaseMock) UpdateFeedError(ctx context.Context, feedID int64, errMsg string) error {
	if mock.UpdateFeedErrorFunc == nil {
		panic("DatabaseMock.UpdateFeedErrorFunc: method is nil but Database.UpdateFeedError was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
		ErrMsg string
	}{
		Ctx:    ctx,
		FeedID: feedID,
		ErrMsg: errMsg,
	}
	mock.lockUpdateFeedError.Lock()
	mock.calls.UpdateFeedError = append(mock.calls.UpdateFeedError, callInfo)
	mock.lockUpdateFeedError.Unlock()
	return mock.UpdateFeedErrorFunc(ctx, feedID, errMsg)
}

// UpdateFeedErrorCalls gets all the calls that were made to UpdateFeedError.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedErrorCalls())
func (mock *DatabaseMock) UpdateFeedErrorCalls() []struct {
	Ctx    context.Context
	FeedID int64
	ErrMsg string
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
		ErrMsg string
	}
	mock.lockUpdateFeedError.RLock()
	calls = mock.calls.UpdateFeedError
	mock.lockUpdateFeedError.RUnlock()
	return calls
}

// UpdateFeedLastFetched calls UpdateFeedLastFetchedFunc.
func (mock *DatabaseMock) UpdateFeedLastFetched(ctx context.Context, feedID int64, lastFetched time.Time) error {
	if mock.UpdateFeedLastFetchedFunc == nil {
		panic("DatabaseMock.UpdateFeedLastFetchedFunc: method is nil but Database.UpdateFeedLastFetched was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		FeedID      int64
		LastFetched time.Time
	}{
		Ctx:         ctx,
		FeedID:      feedID,
		LastFetched: lastFetched,
	}
	mock.lockUpdateFeedLastFetched.Lock()
	mock.calls.UpdateFeedLastFetched = append(mock.calls.UpdateFeedLastFetched, callInfo)
	mock.lockUpdateFeedLastFetched.Unlock()
	return mock.UpdateFeedLastFetchedFunc(ctx, feedID, lastFetched)
}

// UpdateFeedLastFetchedCalls gets all the calls that were made to UpdateFeedLastFetched.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedLastFetchedCalls())
func (mock *DatabaseMock) UpdateFeedLastFetchedCalls() []struct {
	Ctx         context.Context
	FeedID      int64
	LastFetched time.Time
} {
	var calls []struct {
		Ctx         context.Context
		FeedID      int64
		LastFetched time.Time
	}
	mock.lockUpdateFeedLastFetched.RLock()
	calls = mock.calls.UpdateFeedLastFetched
	mock.lockUpdateFeedLastFetched.RUnlock()
	return calls
}
