// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"time"

	"github.com/umputun/newscope/pkg/domain"
)

// FeedManagerMock is a mock implementation of scheduler.FeedManager.
//
//	func TestSomethingThatUsesFeedManager(t *testing.T) {
//
//		// make and configure a mocked scheduler.FeedManager
//		mockedFeedManager := &FeedManagerMock{
//			GetFeedFunc: func(ctx context.Context, id int64) (*domain.Feed, error) {
//				panic("mock out the GetFeed method")
//			},
//			GetFeedsFunc: func(ctx context.Context, enabledOnly bool) ([]*domain.Feed, error) {
//				panic("mock out the GetFeeds method")
//			},
//			UpdateFeedErrorFunc: func(ctx context.Context, feedID int64, errMsg string) error {
//				panic("mock out the UpdateFeedError method")
//			},
//			UpdateFeedFetchedFunc: func(ctx context.Context, feedID int64, nextFetch time.Time) error {
//				panic("mock out the UpdateFeedFetched method")
//			},
//		}
//
//		// use mockedFeedManager in code that requires scheduler.FeedManager
//		// and then make assertions.
//
//	}
type FeedManagerMock struct {
	// GetFeedFunc mocks the GetFeed method.
	GetFeedFunc func(ctx context.Context, id int64) (*domain.Feed, error)

	// GetFeedsFunc mocks the GetFeeds method.
	GetFeedsFunc func(ctx context.Context, enabledOnly bool) ([]*domain.Feed, error)

	// UpdateFeedErrorFunc mocks the UpdateFeedError method.
	UpdateFeedErrorFunc func(ctx context.Context, feedID int64, errMsg string) error

	// UpdateFeedFetchedFunc mocks the UpdateFeedFetched method.
	UpdateFeedFetchedFunc func(ctx context.Context, feedID int64, nextFetch time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// GetFeed holds details about calls to the GetFeed method.
		GetFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetFeeds holds details about calls to the GetFeeds method.
		GetFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EnabledOnly is the enabledOnly argument value.
			EnabledOnly bool
		}
		// UpdateFeedError holds details about calls to the UpdateFeedError method.
		UpdateFeedError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// ErrMsg is the errMsg argument value.
			ErrMsg string
		}
		// UpdateFeedFetched holds details about calls to the UpdateFeedFetched method.
		UpdateFeedFetched []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// NextFetch is the nextFetch argument value.
			NextFetch time.Time
		}
	}
	lockGetFeed           sync.RWMutex
	lockGetFeeds          sync.RWMutex
	lockUpdateFeedError   sync.RWMutex
	lockUpdateFeedFetched sync.RWMutex
}

// GetFeed calls GetFeedFunc.
func (mock *FeedManagerMock) GetFeed(ctx context.Context, id int64) (*domain.Feed, error) {
	if mock.GetFeedFunc == nil {
		panic("FeedManagerMock.GetFeedFunc: method is nil but FeedManager.GetFeed was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetFeed.Lock()
	mock.calls.GetFeed = append(mock.calls.GetFeed, callInfo)
	mock.lockGetFeed.Unlock()
	return mock.GetFeedFunc(ctx, id)
}

// GetFeedCalls gets all the calls that were made to GetFeed.
// Check the length with:
//
//	len(mockedFeedManager.GetFeedCalls())
func (mock *FeedManagerMock) GetFeedCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetFeed.RLock()
	calls = mock.calls.GetFeed
	mock.lockGetFeed.RUnlock()
	return calls
}

// GetFeeds calls GetFeedsFunc.
func (mock *FeedManagerMock) GetFeeds(ctx context.Context, enabledOnly bool) ([]*domain.Feed, error) {
	if mock.GetFeedsFunc == nil {
		panic("FeedManagerMock.GetFeedsFunc: method is nil but FeedManager.GetFeeds was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EnabledOnly bool
	}{
		Ctx:         ctx,
		EnabledOnly: enabledOnly,
	}
	mock.lockGetFeeds.Lock()
	mock.calls.GetFeeds = append(mock.calls.GetFeeds, callInfo)
	mock.lockGetFeeds.Unlock()
	return mock.GetFeedsFunc(ctx, enabledOnly)
}

// GetFeedsCalls gets all the calls that were made to GetFeeds.
// Check the length with:
//
//	len(mockedFeedManager.GetFeedsCalls())
func (mock *FeedManagerMock) GetFeedsCalls() []struct {
	Ctx         context.Context
	EnabledOnly bool
} {
	var calls []struct {
		Ctx         context.Context
		EnabledOnly bool
	}
	mock.lockGetFeeds.RLock()
	calls = mock.calls.GetFeeds
	mock.lockGetFeeds.RUnlock()
	return calls
}

// UpdateFeedError calls UpdateFeedErrorFunc.
func (mock *FeedManagerMock) UpdateFeedError(ctx context.Context, feedID int64, errMsg string) error {
	if mock.UpdateFeedErrorFunc == nil {
		panic("FeedManagerMock.UpdateFeedErrorFunc: method is nil but FeedManager.UpdateFeedError was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
		ErrMsg string
	}{
		Ctx:    ctx,
		FeedID: feedID,
		ErrMsg: errMsg,
	}
	mock.lockUpdateFeedError.Lock()
	mock.calls.UpdateFeedError = append(mock.calls.UpdateFeedError, callInfo)
	mock.lockUpdateFeedError.Unlock()
	return mock.UpdateFeedErrorFunc(ctx, feedID, errMsg)
}

// UpdateFeedErrorCalls gets all the calls that were made to UpdateFeedError.
// Check the length with:
//
//	len(mockedFeedManager.UpdateFeedErrorCalls())
func (mock *FeedManagerMock) UpdateFeedErrorCalls() []struct {
	Ctx    context.Context
	FeedID int64
	ErrMsg string
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
		ErrMsg string
	}
	mock.lockUpdateFeedError.RLock()
	calls = mock.calls.UpdateFeedError
	mock.lockUpdateFeedError.RUnlock()
	return calls
}

// UpdateFeedFetched calls UpdateFeedFetchedFunc.
func (mock *FeedManagerMock) UpdateFeedFetched(ctx context.Context, feedID int64, nextFetch time.Time) error {
	if mock.UpdateFeedFetchedFunc == nil {
		panic("FeedManagerMock.UpdateFeedFetchedFunc: method is nil but FeedManager.UpdateFeedFetched was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		FeedID    int64
		NextFetch time.Time
	}{
		Ctx:       ctx,
		FeedID:    feedID,
		NextFetch: nextFetch,
	}
	mock.lockUpdateFeedFetched.Lock()
	mock.calls.UpdateFeedFetched = append(mock.calls.UpdateFeedFetched, callInfo)
	mock.lockUpdateFeedFetched.Unlock()
	return mock.UpdateFeedFetchedFunc(ctx, feedID, nextFetch)
}

// UpdateFeedFetchedCalls gets all the calls that were made to UpdateFeedFetched.
// Check the length with:
//
//	len(mockedFeedManager.UpdateFeedFetchedCalls())
func (mock *FeedManagerMock) UpdateFeedFetchedCalls() []struct {
	Ctx       context.Context
	FeedID    int64
	NextFetch time.Time
} {
	var calls []struct {
		Ctx       context.Context
		FeedID    int64
		NextFetch time.Time
	}
	mock.lockUpdateFeedFetched.RLock()
	calls = mock.calls.UpdateFeedFetched
	mock.lockUpdateFeedFetched.RUnlock()
	return calls
}
