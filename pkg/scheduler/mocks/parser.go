// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/feed/types"
)

// ParserMock is a mock implementation of scheduler.Parser.
//
//	func TestSomethingThatUsesParser(t *testing.T) {
//
//		// make and configure a mocked scheduler.Parser
//		mockedParser := &ParserMock{
//			ParseFunc: func(ctx context.Context, url string) (*types.Feed, error) {
//				panic("mock out the Parse method")
//			},
//		}
//
//		// use mockedParser in code that requires scheduler.Parser
//		// and then make assertions.
//
//	}
type ParserMock struct {
	// ParseFunc mocks the Parse method.
	ParseFunc func(ctx context.Context, url string) (*types.Feed, error)

	// calls tracks calls to the methods.
	calls struct {
		// Parse holds details about calls to the Parse method.
		Parse []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
	}
	lockParse sync.RWMutex
}

// Parse calls ParseFunc.
func (mock *ParserMock) Parse(ctx context.Context, url string) (*types.Feed, error) {
	if mock.ParseFunc == nil {
		panic("ParserMock.ParseFunc: method is nil but Parser.Parse was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockParse.Lock()
	mock.calls.Parse = append(mock.calls.Parse, callInfo)
	mock.lockParse.Unlock()
	return mock.ParseFunc(ctx, url)
}

// ParseCalls gets all the calls that were made to Parse.
// Check the length with:
//
//	len(mockedParser.ParseCalls())
func (mock *ParserMock) ParseCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockParse.RLock()
	calls = mock.calls.Parse
	mock.lockParse.RUnlock()
	return calls
}
