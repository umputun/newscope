// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/domain"
)

// ClassificationManagerMock is a mock implementation of scheduler.ClassificationManager.
//
//	func TestSomethingThatUsesClassificationManager(t *testing.T) {
//
//		// make and configure a mocked scheduler.ClassificationManager
//		mockedClassificationManager := &ClassificationManagerMock{
//			GetRecentFeedbackFunc: func(ctx context.Context, feedbackType string, limit int) ([]*domain.FeedbackExample, error) {
//				panic("mock out the GetRecentFeedback method")
//			},
//			GetTopicsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetTopics method")
//			},
//		}
//
//		// use mockedClassificationManager in code that requires scheduler.ClassificationManager
//		// and then make assertions.
//
//	}
type ClassificationManagerMock struct {
	// GetRecentFeedbackFunc mocks the GetRecentFeedback method.
	GetRecentFeedbackFunc func(ctx context.Context, feedbackType string, limit int) ([]*domain.FeedbackExample, error)

	// GetTopicsFunc mocks the GetTopics method.
	GetTopicsFunc func(ctx context.Context) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRecentFeedback holds details about calls to the GetRecentFeedback method.
		GetRecentFeedback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedbackType is the feedbackType argument value.
			FeedbackType string
			// Limit is the limit argument value.
			Limit int
		}
		// GetTopics holds details about calls to the GetTopics method.
		GetTopics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetRecentFeedback sync.RWMutex
	lockGetTopics         sync.RWMutex
}

// GetRecentFeedback calls GetRecentFeedbackFunc.
func (mock *ClassificationManagerMock) GetRecentFeedback(ctx context.Context, feedbackType string, limit int) ([]*domain.FeedbackExample, error) {
	if mock.GetRecentFeedbackFunc == nil {
		panic("ClassificationManagerMock.GetRecentFeedbackFunc: method is nil but ClassificationManager.GetRecentFeedback was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		FeedbackType string
		Limit        int
	}{
		Ctx:          ctx,
		FeedbackType: feedbackType,
		Limit:        limit,
	}
	mock.lockGetRecentFeedback.Lock()
	mock.calls.GetRecentFeedback = append(mock.calls.GetRecentFeedback, callInfo)
	mock.lockGetRecentFeedback.Unlock()
	return mock.GetRecentFeedbackFunc(ctx, feedbackType, limit)
}

// GetRecentFeedbackCalls gets all the calls that were made to GetRecentFeedback.
// Check the length with:
//
//	len(mockedClassificationManager.GetRecentFeedbackCalls())
func (mock *ClassificationManagerMock) GetRecentFeedbackCalls() []struct {
	Ctx          context.Context
	FeedbackType string
	Limit        int
} {
	var calls []struct {
		Ctx          context.Context
		FeedbackType string
		Limit        int
	}
	mock.lockGetRecentFeedback.RLock()
	calls = mock.calls.GetRecentFeedback
	mock.lockGetRecentFeedback.RUnlock()
	return calls
}

// GetTopics calls GetTopicsFunc.
func (mock *ClassificationManagerMock) GetTopics(ctx context.Context) ([]string, error) {
	if mock.GetTopicsFunc == nil {
		panic("ClassificationManagerMock.GetTopicsFunc: method is nil but ClassificationManager.GetTopics was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTopics.Lock()
	mock.calls.GetTopics = append(mock.calls.GetTopics, callInfo)
	mock.lockGetTopics.Unlock()
	return mock.GetTopicsFunc(ctx)
}

// GetTopicsCalls gets all the calls that were made to GetTopics.
// Check the length with:
//
//	len(mockedClassificationManager.GetTopicsCalls())
func (mock *ClassificationManagerMock) GetTopicsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTopics.RLock()
	calls = mock.calls.GetTopics
	mock.lockGetTopics.RUnlock()
	return calls
}
