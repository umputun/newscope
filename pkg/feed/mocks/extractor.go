// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// ExtractorMock is a mock implementation of feed.Extractor.
//
//	func TestSomethingThatUsesExtractor(t *testing.T) {
//
//		// make and configure a mocked feed.Extractor
//		mockedExtractor := &ExtractorMock{
//			ExtractFunc: func(ctx context.Context, url string) (string, error) {
//				panic("mock out the Extract method")
//			},
//		}
//
//		// use mockedExtractor in code that requires feed.Extractor
//		// and then make assertions.
//
//	}
type ExtractorMock struct {
	// ExtractFunc mocks the Extract method.
	ExtractFunc func(ctx context.Context, url string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Extract holds details about calls to the Extract method.
		Extract []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
	}
	lockExtract sync.RWMutex
}

// Extract calls ExtractFunc.
func (mock *ExtractorMock) Extract(ctx context.Context, url string) (string, error) {
	if mock.ExtractFunc == nil {
		panic("ExtractorMock.ExtractFunc: method is nil but Extractor.Extract was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockExtract.Lock()
	mock.calls.Extract = append(mock.calls.Extract, callInfo)
	mock.lockExtract.Unlock()
	return mock.ExtractFunc(ctx, url)
}

// ExtractCalls gets all the calls that were made to Extract.
// Check the length with:
//
//	len(mockedExtractor.ExtractCalls())
func (mock *ExtractorMock) ExtractCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockExtract.RLock()
	calls = mock.calls.Extract
	mock.lockExtract.RUnlock()
	return calls
}
