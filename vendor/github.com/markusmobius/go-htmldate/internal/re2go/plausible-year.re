/*!include:re2c "base.re" */

// PYTHON NAME: SELECT_YMD_PATTERN
// Original pattern: \D([0-3]?[0-9][/.-][01]?[0-9][/.-][0-9]{4})\D
func SelectYmdPattern(input string) [][]int {
	var cursor, marker int
	input += string(rune(0)) // add terminating null
	limit := len(input) - 1  // limit points at the terminating null
	_ = marker

	// Variable for capturing parentheses (twice the number of groups).
	/*!maxnmatch:re2c*/
	yypmatch := make([]int, YYMAXNMATCH*2)
	var yynmatch int
	_ = yynmatch

	// Autogenerated tag variables used by the lexer to track tag values.
	/*!stags:re2c format = 'var @@ int; _ = @@\n'; */

	var allIndexes [][]int
	for { /*!use:re2c:base_template
		re2c:posix-captures = 1;

		ymd = [^0-9]([0-3]?[0-9][/.-][01]?[0-9][/.-][0-9]{4})[^0-9];

		{ymd} {
			allIndexes = append(allIndexes, copyIndexes(yypmatch))
			continue
		}

		* { continue }
		$ { return allIndexes }
		*/
	}
}

// PYTHON NAME: SLASHES_PATTERN
// Original pattern: \D([0-3]?[0-9]/[01]?[0-9]/[0129][0-9]|[0-3][0-9]\.[01][0-9]\.[0129][0-9])\D
func SlashesPattern(input string) [][]int {
	var cursor, marker int
	input += string(rune(0)) // add terminating null
	limit := len(input) - 1  // limit points at the terminating null
	_ = marker

	// Variable for capturing parentheses (twice the number of groups).
	/*!maxnmatch:re2c*/
	yypmatch := make([]int, YYMAXNMATCH*2)
	var yynmatch int
	_ = yynmatch

	// Autogenerated tag variables used by the lexer to track tag values.
	/*!stags:re2c format = 'var @@ int; _ = @@\n'; */

	var allIndexes [][]int
	for { /*!use:re2c:base_template
		re2c:posix-captures = 1;

		slashes = [^0-9]([0-3]?[0-9][/][01]?[0-9][/][0129][0-9]|[0-3][0-9][.][01][0-9][.][0129][0-9])[^0-9];

		{slashes} {
			allIndexes = append(allIndexes, copyIndexes(yypmatch))
			continue
		}

		* { continue }
		$ { return allIndexes }
		*/
	}
}

// PYTHON NAME: MMYYYY_PATTERN
// Original pattern: \D([01]?[0-9][/.-][12][0-9]{3})\D
func MmYyyyPattern(input string) [][]int {
	var cursor, marker int
	input += string(rune(0)) // add terminating null
	limit := len(input) - 1  // limit points at the terminating null
	_ = marker

	// Variable for capturing parentheses (twice the number of groups).
	/*!maxnmatch:re2c*/
	yypmatch := make([]int, YYMAXNMATCH*2)
	var yynmatch int
	_ = yynmatch

	// Autogenerated tag variables used by the lexer to track tag values.
	/*!stags:re2c format = 'var @@ int; _ = @@\n'; */

	var allIndexes [][]int
	for { /*!use:re2c:base_template
		re2c:posix-captures = 1;

		mmYyyy = [^0-9]([01]?[0-9][/.-][12][0-9]{3})[^0-9];

		{mmYyyy} {
			allIndexes = append(allIndexes, copyIndexes(yypmatch))
			continue
		}

		* { continue }
		$ { return allIndexes }
		*/
	}
}

