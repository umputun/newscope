/*!include:re2c "base.re" */

// TODO: check "août"
// PYTHON NAME: LONG_TEXT_PATTERN
// Given the following pattern:
//
// - day: [0-3]?[0-9]
// - year: 199[0-9]|20[0-3][0-9]
// - month: January?|February?|March|A[pv]ril|Ma[iy]|Jun[ei]|Jul[iy]|August|September|O[ck]tober|November|De[csz]ember|Jan|Feb|M[aä]r|Apr|Jun|Jul|Aug|Sep|O[ck]t|Nov|De[cz]|Januari|Februari|Maret|Mei|Agustus|Jänner|Feber|März|janvier|février|mars|juin|juillet|aout|septembre|octobre|novembre|décembre|Ocak|Şubat|Mart|Nisan|Mayıs|Haziran|Temmuz|Ağustos|Eylül|Ekim|Kasım|Aralık|Oca|Şub|Mar|Nis|Haz|Tem|Ağu|Eyl|Eki|Kas|Ara
//
// It's combined into two patterns:
//
// - MDY = ({rxMonth})[\t\n\f\r ]({rxDay})(!st|nd|rd|th)?,?[\t\n\f\r ]({rxYear})
// - DMY = ({rxDay})(!st|nd|rd|th|[.])?[\t\n\f\r ](!of[\t\n\f\r ])?({rxMonth})[,.]?[\t\n\f\r ]({rxYear})
func FindLongTextPattern(input string) (year, month, day string, ok bool) {
	var cursor, marker int
	input += string(rune(0)) // add terminating null
	limit := len(input) - 1  // limit points at the terminating null
	_ = marker

	// Variable for capturing parentheses (twice the number of groups).
	/*!maxnmatch:re2c*/
	yypmatch := make([]int, YYMAXNMATCH*2)
	var yynmatch int
	_ = yynmatch

	// Autogenerated tag variables used by the lexer to track tag values.
	/*!stags:re2c format = 'var @@ int; _ = @@\n'; */

	for { /*!use:re2c:base_template
		re2c:posix-captures   = 1;
		re2c:case-insensitive = 1;

		rxDay = [0-3]?[0-9];
		rxYear = 199[0-9]|20[0-3][0-9];
		rxMonth = January?|February?|March|A[pvPV]ril|Ma[iyIY]|Jun[eiEI]|Jul[iyIY]|August|September|O[ckCK]tober|November|De[cszCSZ]ember|Jan|Feb|M[aäAÄ]r|Apr|Jun|Jul|Aug|Sep|O[ckCK]t|Nov|De[czCZ]|Januari|Februari|Maret|Mei|Agustus|J[äÄ]nner|Feber|M[äÄ]rz|janvier|f[éÉ]vrier|mars|juin|juillet|aout|septembre|octobre|novembre|d[éÉ]cembre|Ocak|[şŞ]ubat|Mart|Nisan|May[ıI]s|Haziran|Temmuz|A[ğĞ]ustos|Eyl[üÜ]l|Ekim|Kas[ıI]m|Aral[ıI]k|Oca|[şŞ]ub|Mar|Nis|Haz|Tem|A[ğĞ]u|Eyl|Eki|Kas|Ara;
		rxMDY = ({rxMonth})[\t\n\f\r ]({rxDay})(!st|nd|rd|th)?,?[\t\n\f\r ]({rxYear});
		rxDMY = ({rxDay})(!st|nd|rd|th|[.])?[\t\n\f\r ](!of[\t\n\f\r ])?({rxMonth})[,.]?[\t\n\f\r ]({rxYear});

		{rxMDY} {
			month = input[yypmatch[2]:yypmatch[3]]
			day = input[yypmatch[4]:yypmatch[5]]
			year = input[yypmatch[6]:yypmatch[7]]
			ok = true
			return
		}

		{rxDMY} {
			day = input[yypmatch[2]:yypmatch[3]]
			month = input[yypmatch[4]:yypmatch[5]]
			year = input[yypmatch[6]:yypmatch[7]]
			ok = true
			return
		}

		* { continue }
		$ { return }
		*/
	}
}