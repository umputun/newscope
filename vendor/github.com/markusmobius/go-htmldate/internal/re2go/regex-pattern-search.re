/*!include:re2c "base.re" */

// PYTHON NAME: TIMESTAMP_PATTERN
// Given the following pattern:
//
// - day: [0-3]?[0-9]
// - month: [0-1]?[0-9]
// - year: 199[0-9]|20[0-3][0-9]
//
// Its original pattern is: (?i)((?:year)-(?:month)-(?:day)).[0-9]{2}:[0-9]{2}:[0-9]{2}
func TimestampPatternSubmatch(input string) ([]string, int) {
	var cursor, marker int
	input += string(rune(0)) // add terminating null
	limit := len(input) - 1  // limit points at the terminating null
	_ = marker

	// Variable for capturing parentheses (twice the number of groups).
	/*!maxnmatch:re2c*/
	yypmatch := make([]int, YYMAXNMATCH*2)
	var yynmatch int
	_ = yynmatch

	// Autogenerated tag variables used by the lexer to track tag values.
	/*!stags:re2c format = 'var @@ int; _ = @@\n'; */

	for { /*!use:re2c:base_template
		re2c:posix-captures   = 1;
		re2c:case-insensitive = 1;

		day   = [0-3]?[0-9];
		month = [0-1]?[0-9];
		year  = 199[0-9]|20[0-3][0-9];
		timestamp = ((!{year})-(!{month})-(!{day})).[0-9]{2}:[0-9]{2}:[0-9]{2};

		{timestamp} { return getAllSubmatch(input, YYMAXNMATCH, yypmatch) }

		* { continue }
		$ { return nil, -1 }
		*/
	}
}

