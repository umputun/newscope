// Code generated by re2c 3.1, DO NOT EDIT.
package re2go

import "strings"

// Original pattern: (?i)[\?\!\.\-\:]+
func RemoveDtmCharacters(input string) string {
	var cursor, marker int
	input += string(rune(0)) // add terminating null
	limit := len(input) - 1  // limit points at the terminating null
	_ = marker

	// Variable for capturing parentheses (twice the number of groups).
	var YYMAXNMATCH int = 1

	yypmatch := make([]int, YYMAXNMATCH*2)
	var yynmatch int
	_ = yynmatch

	// Autogenerated tag variables used by the lexer to track tag values.
	var yyt1 int
	_ = yyt1

	var start int
	var sb strings.Builder
	for {
		{
			var yych byte
			yych = input[cursor]
			switch yych {
			case '!':
				fallthrough
			case '-', '.':
				fallthrough
			case ':':
				fallthrough
			case '?':
				yyt1 = cursor
				goto yy2
			default:
				if limit <= cursor {
					goto yy4
				}
				goto yy1
			}
		yy1:
			cursor++
			{
				continue
			}
		yy2:
			cursor++
			yych = input[cursor]
			switch yych {
			case '!':
				fallthrough
			case '-', '.':
				fallthrough
			case ':':
				fallthrough
			case '?':
				goto yy2
			default:
				goto yy3
			}
		yy3:
			yynmatch = 1
			yypmatch[0] = yyt1
			yypmatch[1] = cursor
			{
				sb.WriteString(input[start:yypmatch[0]])
				start = yypmatch[1]
				continue
			}
		yy4:
			{
				sb.WriteString(input[start:limit])
				return sb.String()
			}
		}

	}
}
