// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/domain"
)

// ItemRepoMock is a mock implementation of server.ItemRepo.
//
//	func TestSomethingThatUsesItemRepo(t *testing.T) {
//
//		// make and configure a mocked server.ItemRepo
//		mockedItemRepo := &ItemRepoMock{
//			GetItemsFunc: func(ctx context.Context, limit int, minScore float64) ([]domain.Item, error) {
//				panic("mock out the GetItems method")
//			},
//		}
//
//		// use mockedItemRepo in code that requires server.ItemRepo
//		// and then make assertions.
//
//	}
type ItemRepoMock struct {
	// GetItemsFunc mocks the GetItems method.
	GetItemsFunc func(ctx context.Context, limit int, minScore float64) ([]domain.Item, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetItems holds details about calls to the GetItems method.
		GetItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// MinScore is the minScore argument value.
			MinScore float64
		}
	}
	lockGetItems sync.RWMutex
}

// GetItems calls GetItemsFunc.
func (mock *ItemRepoMock) GetItems(ctx context.Context, limit int, minScore float64) ([]domain.Item, error) {
	if mock.GetItemsFunc == nil {
		panic("ItemRepoMock.GetItemsFunc: method is nil but ItemRepo.GetItems was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Limit    int
		MinScore float64
	}{
		Ctx:      ctx,
		Limit:    limit,
		MinScore: minScore,
	}
	mock.lockGetItems.Lock()
	mock.calls.GetItems = append(mock.calls.GetItems, callInfo)
	mock.lockGetItems.Unlock()
	return mock.GetItemsFunc(ctx, limit, minScore)
}

// GetItemsCalls gets all the calls that were made to GetItems.
// Check the length with:
//
//	len(mockedItemRepo.GetItemsCalls())
func (mock *ItemRepoMock) GetItemsCalls() []struct {
	Ctx      context.Context
	Limit    int
	MinScore float64
} {
	var calls []struct {
		Ctx      context.Context
		Limit    int
		MinScore float64
	}
	mock.lockGetItems.RLock()
	calls = mock.calls.GetItems
	mock.lockGetItems.RUnlock()
	return calls
}
