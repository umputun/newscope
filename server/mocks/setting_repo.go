// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// SettingRepoMock is a mock implementation of server.SettingRepo.
//
//	func TestSomethingThatUsesSettingRepo(t *testing.T) {
//
//		// make and configure a mocked server.SettingRepo
//		mockedSettingRepo := &SettingRepoMock{
//			GetSettingFunc: func(ctx context.Context, key string) (string, error) {
//				panic("mock out the GetSetting method")
//			},
//			SetSettingFunc: func(ctx context.Context, key string, value string) error {
//				panic("mock out the SetSetting method")
//			},
//		}
//
//		// use mockedSettingRepo in code that requires server.SettingRepo
//		// and then make assertions.
//
//	}
type SettingRepoMock struct {
	// GetSettingFunc mocks the GetSetting method.
	GetSettingFunc func(ctx context.Context, key string) (string, error)

	// SetSettingFunc mocks the SetSetting method.
	SetSettingFunc func(ctx context.Context, key string, value string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetSetting holds details about calls to the GetSetting method.
		GetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// SetSetting holds details about calls to the SetSetting method.
		SetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
		}
	}
	lockGetSetting sync.RWMutex
	lockSetSetting sync.RWMutex
}

// GetSetting calls GetSettingFunc.
func (mock *SettingRepoMock) GetSetting(ctx context.Context, key string) (string, error) {
	if mock.GetSettingFunc == nil {
		panic("SettingRepoMock.GetSettingFunc: method is nil but SettingRepo.GetSetting was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetSetting.Lock()
	mock.calls.GetSetting = append(mock.calls.GetSetting, callInfo)
	mock.lockGetSetting.Unlock()
	return mock.GetSettingFunc(ctx, key)
}

// GetSettingCalls gets all the calls that were made to GetSetting.
// Check the length with:
//
//	len(mockedSettingRepo.GetSettingCalls())
func (mock *SettingRepoMock) GetSettingCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetSetting.RLock()
	calls = mock.calls.GetSetting
	mock.lockGetSetting.RUnlock()
	return calls
}

// SetSetting calls SetSettingFunc.
func (mock *SettingRepoMock) SetSetting(ctx context.Context, key string, value string) error {
	if mock.SetSettingFunc == nil {
		panic("SettingRepoMock.SetSettingFunc: method is nil but SettingRepo.SetSetting was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Value string
	}{
		Ctx:   ctx,
		Key:   key,
		Value: value,
	}
	mock.lockSetSetting.Lock()
	mock.calls.SetSetting = append(mock.calls.SetSetting, callInfo)
	mock.lockSetSetting.Unlock()
	return mock.SetSettingFunc(ctx, key, value)
}

// SetSettingCalls gets all the calls that were made to SetSetting.
// Check the length with:
//
//	len(mockedSettingRepo.SetSettingCalls())
func (mock *SettingRepoMock) SetSettingCalls() []struct {
	Ctx   context.Context
	Key   string
	Value string
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Value string
	}
	mock.lockSetSetting.RLock()
	calls = mock.calls.SetSetting
	mock.lockSetSetting.RUnlock()
	return calls
}
