// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/domain"
	"github.com/umputun/newscope/pkg/repository"
)

// ClassificationRepoMock is a mock implementation of server.ClassificationRepo.
//
//	func TestSomethingThatUsesClassificationRepo(t *testing.T) {
//
//		// make and configure a mocked server.ClassificationRepo
//		mockedClassificationRepo := &ClassificationRepoMock{
//			GetClassifiedItemFunc: func(ctx context.Context, itemID int64) (*domain.ClassifiedItem, error) {
//				panic("mock out the GetClassifiedItem method")
//			},
//			GetClassifiedItemsFunc: func(ctx context.Context, filter *domain.ItemFilter) ([]*domain.ClassifiedItem, error) {
//				panic("mock out the GetClassifiedItems method")
//			},
//			GetClassifiedItemsCountFunc: func(ctx context.Context, filter *domain.ItemFilter) (int, error) {
//				panic("mock out the GetClassifiedItemsCount method")
//			},
//			GetFeedbackCountFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetFeedbackCount method")
//			},
//			GetTopTopicsByScoreFunc: func(ctx context.Context, minScore float64, limit int) ([]repository.TopicWithScore, error) {
//				panic("mock out the GetTopTopicsByScore method")
//			},
//			GetTopicsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetTopics method")
//			},
//			GetTopicsFilteredFunc: func(ctx context.Context, minScore float64) ([]string, error) {
//				panic("mock out the GetTopicsFiltered method")
//			},
//			UpdateItemFeedbackFunc: func(ctx context.Context, itemID int64, feedback *domain.Feedback) error {
//				panic("mock out the UpdateItemFeedback method")
//			},
//		}
//
//		// use mockedClassificationRepo in code that requires server.ClassificationRepo
//		// and then make assertions.
//
//	}
type ClassificationRepoMock struct {
	// GetClassifiedItemFunc mocks the GetClassifiedItem method.
	GetClassifiedItemFunc func(ctx context.Context, itemID int64) (*domain.ClassifiedItem, error)

	// GetClassifiedItemsFunc mocks the GetClassifiedItems method.
	GetClassifiedItemsFunc func(ctx context.Context, filter *domain.ItemFilter) ([]*domain.ClassifiedItem, error)

	// GetClassifiedItemsCountFunc mocks the GetClassifiedItemsCount method.
	GetClassifiedItemsCountFunc func(ctx context.Context, filter *domain.ItemFilter) (int, error)

	// GetFeedbackCountFunc mocks the GetFeedbackCount method.
	GetFeedbackCountFunc func(ctx context.Context) (int64, error)

	// GetTopTopicsByScoreFunc mocks the GetTopTopicsByScore method.
	GetTopTopicsByScoreFunc func(ctx context.Context, minScore float64, limit int) ([]repository.TopicWithScore, error)

	// GetTopicsFunc mocks the GetTopics method.
	GetTopicsFunc func(ctx context.Context) ([]string, error)

	// GetTopicsFilteredFunc mocks the GetTopicsFiltered method.
	GetTopicsFilteredFunc func(ctx context.Context, minScore float64) ([]string, error)

	// UpdateItemFeedbackFunc mocks the UpdateItemFeedback method.
	UpdateItemFeedbackFunc func(ctx context.Context, itemID int64, feedback *domain.Feedback) error

	// calls tracks calls to the methods.
	calls struct {
		// GetClassifiedItem holds details about calls to the GetClassifiedItem method.
		GetClassifiedItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
		}
		// GetClassifiedItems holds details about calls to the GetClassifiedItems method.
		GetClassifiedItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *domain.ItemFilter
		}
		// GetClassifiedItemsCount holds details about calls to the GetClassifiedItemsCount method.
		GetClassifiedItemsCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *domain.ItemFilter
		}
		// GetFeedbackCount holds details about calls to the GetFeedbackCount method.
		GetFeedbackCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTopTopicsByScore holds details about calls to the GetTopTopicsByScore method.
		GetTopTopicsByScore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
			// Limit is the limit argument value.
			Limit int
		}
		// GetTopics holds details about calls to the GetTopics method.
		GetTopics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTopicsFiltered holds details about calls to the GetTopicsFiltered method.
		GetTopicsFiltered []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
		}
		// UpdateItemFeedback holds details about calls to the UpdateItemFeedback method.
		UpdateItemFeedback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
			// Feedback is the feedback argument value.
			Feedback *domain.Feedback
		}
	}
	lockGetClassifiedItem       sync.RWMutex
	lockGetClassifiedItems      sync.RWMutex
	lockGetClassifiedItemsCount sync.RWMutex
	lockGetFeedbackCount        sync.RWMutex
	lockGetTopTopicsByScore     sync.RWMutex
	lockGetTopics               sync.RWMutex
	lockGetTopicsFiltered       sync.RWMutex
	lockUpdateItemFeedback      sync.RWMutex
}

// GetClassifiedItem calls GetClassifiedItemFunc.
func (mock *ClassificationRepoMock) GetClassifiedItem(ctx context.Context, itemID int64) (*domain.ClassifiedItem, error) {
	if mock.GetClassifiedItemFunc == nil {
		panic("ClassificationRepoMock.GetClassifiedItemFunc: method is nil but ClassificationRepo.GetClassifiedItem was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemID int64
	}{
		Ctx:    ctx,
		ItemID: itemID,
	}
	mock.lockGetClassifiedItem.Lock()
	mock.calls.GetClassifiedItem = append(mock.calls.GetClassifiedItem, callInfo)
	mock.lockGetClassifiedItem.Unlock()
	return mock.GetClassifiedItemFunc(ctx, itemID)
}

// GetClassifiedItemCalls gets all the calls that were made to GetClassifiedItem.
// Check the length with:
//
//	len(mockedClassificationRepo.GetClassifiedItemCalls())
func (mock *ClassificationRepoMock) GetClassifiedItemCalls() []struct {
	Ctx    context.Context
	ItemID int64
} {
	var calls []struct {
		Ctx    context.Context
		ItemID int64
	}
	mock.lockGetClassifiedItem.RLock()
	calls = mock.calls.GetClassifiedItem
	mock.lockGetClassifiedItem.RUnlock()
	return calls
}

// GetClassifiedItems calls GetClassifiedItemsFunc.
func (mock *ClassificationRepoMock) GetClassifiedItems(ctx context.Context, filter *domain.ItemFilter) ([]*domain.ClassifiedItem, error) {
	if mock.GetClassifiedItemsFunc == nil {
		panic("ClassificationRepoMock.GetClassifiedItemsFunc: method is nil but ClassificationRepo.GetClassifiedItems was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter *domain.ItemFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetClassifiedItems.Lock()
	mock.calls.GetClassifiedItems = append(mock.calls.GetClassifiedItems, callInfo)
	mock.lockGetClassifiedItems.Unlock()
	return mock.GetClassifiedItemsFunc(ctx, filter)
}

// GetClassifiedItemsCalls gets all the calls that were made to GetClassifiedItems.
// Check the length with:
//
//	len(mockedClassificationRepo.GetClassifiedItemsCalls())
func (mock *ClassificationRepoMock) GetClassifiedItemsCalls() []struct {
	Ctx    context.Context
	Filter *domain.ItemFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter *domain.ItemFilter
	}
	mock.lockGetClassifiedItems.RLock()
	calls = mock.calls.GetClassifiedItems
	mock.lockGetClassifiedItems.RUnlock()
	return calls
}

// GetClassifiedItemsCount calls GetClassifiedItemsCountFunc.
func (mock *ClassificationRepoMock) GetClassifiedItemsCount(ctx context.Context, filter *domain.ItemFilter) (int, error) {
	if mock.GetClassifiedItemsCountFunc == nil {
		panic("ClassificationRepoMock.GetClassifiedItemsCountFunc: method is nil but ClassificationRepo.GetClassifiedItemsCount was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter *domain.ItemFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetClassifiedItemsCount.Lock()
	mock.calls.GetClassifiedItemsCount = append(mock.calls.GetClassifiedItemsCount, callInfo)
	mock.lockGetClassifiedItemsCount.Unlock()
	return mock.GetClassifiedItemsCountFunc(ctx, filter)
}

// GetClassifiedItemsCountCalls gets all the calls that were made to GetClassifiedItemsCount.
// Check the length with:
//
//	len(mockedClassificationRepo.GetClassifiedItemsCountCalls())
func (mock *ClassificationRepoMock) GetClassifiedItemsCountCalls() []struct {
	Ctx    context.Context
	Filter *domain.ItemFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter *domain.ItemFilter
	}
	mock.lockGetClassifiedItemsCount.RLock()
	calls = mock.calls.GetClassifiedItemsCount
	mock.lockGetClassifiedItemsCount.RUnlock()
	return calls
}

// GetFeedbackCount calls GetFeedbackCountFunc.
func (mock *ClassificationRepoMock) GetFeedbackCount(ctx context.Context) (int64, error) {
	if mock.GetFeedbackCountFunc == nil {
		panic("ClassificationRepoMock.GetFeedbackCountFunc: method is nil but ClassificationRepo.GetFeedbackCount was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetFeedbackCount.Lock()
	mock.calls.GetFeedbackCount = append(mock.calls.GetFeedbackCount, callInfo)
	mock.lockGetFeedbackCount.Unlock()
	return mock.GetFeedbackCountFunc(ctx)
}

// GetFeedbackCountCalls gets all the calls that were made to GetFeedbackCount.
// Check the length with:
//
//	len(mockedClassificationRepo.GetFeedbackCountCalls())
func (mock *ClassificationRepoMock) GetFeedbackCountCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetFeedbackCount.RLock()
	calls = mock.calls.GetFeedbackCount
	mock.lockGetFeedbackCount.RUnlock()
	return calls
}

// GetTopTopicsByScore calls GetTopTopicsByScoreFunc.
func (mock *ClassificationRepoMock) GetTopTopicsByScore(ctx context.Context, minScore float64, limit int) ([]repository.TopicWithScore, error) {
	if mock.GetTopTopicsByScoreFunc == nil {
		panic("ClassificationRepoMock.GetTopTopicsByScoreFunc: method is nil but ClassificationRepo.GetTopTopicsByScore was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
		Limit    int
	}{
		Ctx:      ctx,
		MinScore: minScore,
		Limit:    limit,
	}
	mock.lockGetTopTopicsByScore.Lock()
	mock.calls.GetTopTopicsByScore = append(mock.calls.GetTopTopicsByScore, callInfo)
	mock.lockGetTopTopicsByScore.Unlock()
	return mock.GetTopTopicsByScoreFunc(ctx, minScore, limit)
}

// GetTopTopicsByScoreCalls gets all the calls that were made to GetTopTopicsByScore.
// Check the length with:
//
//	len(mockedClassificationRepo.GetTopTopicsByScoreCalls())
func (mock *ClassificationRepoMock) GetTopTopicsByScoreCalls() []struct {
	Ctx      context.Context
	MinScore float64
	Limit    int
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
		Limit    int
	}
	mock.lockGetTopTopicsByScore.RLock()
	calls = mock.calls.GetTopTopicsByScore
	mock.lockGetTopTopicsByScore.RUnlock()
	return calls
}

// GetTopics calls GetTopicsFunc.
func (mock *ClassificationRepoMock) GetTopics(ctx context.Context) ([]string, error) {
	if mock.GetTopicsFunc == nil {
		panic("ClassificationRepoMock.GetTopicsFunc: method is nil but ClassificationRepo.GetTopics was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTopics.Lock()
	mock.calls.GetTopics = append(mock.calls.GetTopics, callInfo)
	mock.lockGetTopics.Unlock()
	return mock.GetTopicsFunc(ctx)
}

// GetTopicsCalls gets all the calls that were made to GetTopics.
// Check the length with:
//
//	len(mockedClassificationRepo.GetTopicsCalls())
func (mock *ClassificationRepoMock) GetTopicsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTopics.RLock()
	calls = mock.calls.GetTopics
	mock.lockGetTopics.RUnlock()
	return calls
}

// GetTopicsFiltered calls GetTopicsFilteredFunc.
func (mock *ClassificationRepoMock) GetTopicsFiltered(ctx context.Context, minScore float64) ([]string, error) {
	if mock.GetTopicsFilteredFunc == nil {
		panic("ClassificationRepoMock.GetTopicsFilteredFunc: method is nil but ClassificationRepo.GetTopicsFiltered was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
	}{
		Ctx:      ctx,
		MinScore: minScore,
	}
	mock.lockGetTopicsFiltered.Lock()
	mock.calls.GetTopicsFiltered = append(mock.calls.GetTopicsFiltered, callInfo)
	mock.lockGetTopicsFiltered.Unlock()
	return mock.GetTopicsFilteredFunc(ctx, minScore)
}

// GetTopicsFilteredCalls gets all the calls that were made to GetTopicsFiltered.
// Check the length with:
//
//	len(mockedClassificationRepo.GetTopicsFilteredCalls())
func (mock *ClassificationRepoMock) GetTopicsFilteredCalls() []struct {
	Ctx      context.Context
	MinScore float64
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
	}
	mock.lockGetTopicsFiltered.RLock()
	calls = mock.calls.GetTopicsFiltered
	mock.lockGetTopicsFiltered.RUnlock()
	return calls
}

// UpdateItemFeedback calls UpdateItemFeedbackFunc.
func (mock *ClassificationRepoMock) UpdateItemFeedback(ctx context.Context, itemID int64, feedback *domain.Feedback) error {
	if mock.UpdateItemFeedbackFunc == nil {
		panic("ClassificationRepoMock.UpdateItemFeedbackFunc: method is nil but ClassificationRepo.UpdateItemFeedback was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ItemID   int64
		Feedback *domain.Feedback
	}{
		Ctx:      ctx,
		ItemID:   itemID,
		Feedback: feedback,
	}
	mock.lockUpdateItemFeedback.Lock()
	mock.calls.UpdateItemFeedback = append(mock.calls.UpdateItemFeedback, callInfo)
	mock.lockUpdateItemFeedback.Unlock()
	return mock.UpdateItemFeedbackFunc(ctx, itemID, feedback)
}

// UpdateItemFeedbackCalls gets all the calls that were made to UpdateItemFeedback.
// Check the length with:
//
//	len(mockedClassificationRepo.UpdateItemFeedbackCalls())
func (mock *ClassificationRepoMock) UpdateItemFeedbackCalls() []struct {
	Ctx      context.Context
	ItemID   int64
	Feedback *domain.Feedback
} {
	var calls []struct {
		Ctx      context.Context
		ItemID   int64
		Feedback *domain.Feedback
	}
	mock.lockUpdateItemFeedback.RLock()
	calls = mock.calls.UpdateItemFeedback
	mock.lockUpdateItemFeedback.RUnlock()
	return calls
}
