// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/domain"
)

// DatabaseMock is a mock implementation of server.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked server.Database
//		mockedDatabase := &DatabaseMock{
//			CreateFeedFunc: func(ctx context.Context, feed *domain.Feed) error {
//				panic("mock out the CreateFeed method")
//			},
//			DeleteFeedFunc: func(ctx context.Context, feedID int64) error {
//				panic("mock out the DeleteFeed method")
//			},
//			GetActiveFeedNamesFunc: func(ctx context.Context, minScore float64) ([]string, error) {
//				panic("mock out the GetActiveFeedNames method")
//			},
//			GetAllFeedsFunc: func(ctx context.Context) ([]domain.Feed, error) {
//				panic("mock out the GetAllFeeds method")
//			},
//			GetClassifiedItemFunc: func(ctx context.Context, itemID int64) (*domain.ItemWithClassification, error) {
//				panic("mock out the GetClassifiedItem method")
//			},
//			GetClassifiedItemsFunc: func(ctx context.Context, minScore float64, topic string, limit int) ([]domain.ItemWithClassification, error) {
//				panic("mock out the GetClassifiedItems method")
//			},
//			GetClassifiedItemsCountFunc: func(ctx context.Context, req domain.ArticlesRequest) (int, error) {
//				panic("mock out the GetClassifiedItemsCount method")
//			},
//			GetClassifiedItemsWithFiltersFunc: func(ctx context.Context, req domain.ArticlesRequest) ([]domain.ItemWithClassification, error) {
//				panic("mock out the GetClassifiedItemsWithFilters method")
//			},
//			GetFeedsFunc: func(ctx context.Context) ([]domain.Feed, error) {
//				panic("mock out the GetFeeds method")
//			},
//			GetItemsFunc: func(ctx context.Context, limit int, offset int) ([]domain.Item, error) {
//				panic("mock out the GetItems method")
//			},
//			GetTopTopicsByScoreFunc: func(ctx context.Context, minScore float64, limit int) ([]domain.TopicWithScore, error) {
//				panic("mock out the GetTopTopicsByScore method")
//			},
//			GetTopicsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetTopics method")
//			},
//			GetTopicsFilteredFunc: func(ctx context.Context, minScore float64) ([]string, error) {
//				panic("mock out the GetTopicsFiltered method")
//			},
//			UpdateFeedFunc: func(ctx context.Context, feedID int64, title string, fetchInterval int) error {
//				panic("mock out the UpdateFeed method")
//			},
//			UpdateFeedStatusFunc: func(ctx context.Context, feedID int64, enabled bool) error {
//				panic("mock out the UpdateFeedStatus method")
//			},
//			UpdateItemFeedbackFunc: func(ctx context.Context, itemID int64, feedback string) error {
//				panic("mock out the UpdateItemFeedback method")
//			},
//		}
//
//		// use mockedDatabase in code that requires server.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// CreateFeedFunc mocks the CreateFeed method.
	CreateFeedFunc func(ctx context.Context, feed *domain.Feed) error

	// DeleteFeedFunc mocks the DeleteFeed method.
	DeleteFeedFunc func(ctx context.Context, feedID int64) error

	// GetActiveFeedNamesFunc mocks the GetActiveFeedNames method.
	GetActiveFeedNamesFunc func(ctx context.Context, minScore float64) ([]string, error)

	// GetAllFeedsFunc mocks the GetAllFeeds method.
	GetAllFeedsFunc func(ctx context.Context) ([]domain.Feed, error)

	// GetClassifiedItemFunc mocks the GetClassifiedItem method.
	GetClassifiedItemFunc func(ctx context.Context, itemID int64) (*domain.ItemWithClassification, error)

	// GetClassifiedItemsFunc mocks the GetClassifiedItems method.
	GetClassifiedItemsFunc func(ctx context.Context, minScore float64, topic string, limit int) ([]domain.ItemWithClassification, error)

	// GetClassifiedItemsCountFunc mocks the GetClassifiedItemsCount method.
	GetClassifiedItemsCountFunc func(ctx context.Context, req domain.ArticlesRequest) (int, error)

	// GetClassifiedItemsWithFiltersFunc mocks the GetClassifiedItemsWithFilters method.
	GetClassifiedItemsWithFiltersFunc func(ctx context.Context, req domain.ArticlesRequest) ([]domain.ItemWithClassification, error)

	// GetFeedsFunc mocks the GetFeeds method.
	GetFeedsFunc func(ctx context.Context) ([]domain.Feed, error)

	// GetItemsFunc mocks the GetItems method.
	GetItemsFunc func(ctx context.Context, limit int, offset int) ([]domain.Item, error)

	// GetTopTopicsByScoreFunc mocks the GetTopTopicsByScore method.
	GetTopTopicsByScoreFunc func(ctx context.Context, minScore float64, limit int) ([]domain.TopicWithScore, error)

	// GetTopicsFunc mocks the GetTopics method.
	GetTopicsFunc func(ctx context.Context) ([]string, error)

	// GetTopicsFilteredFunc mocks the GetTopicsFiltered method.
	GetTopicsFilteredFunc func(ctx context.Context, minScore float64) ([]string, error)

	// UpdateFeedFunc mocks the UpdateFeed method.
	UpdateFeedFunc func(ctx context.Context, feedID int64, title string, fetchInterval int) error

	// UpdateFeedStatusFunc mocks the UpdateFeedStatus method.
	UpdateFeedStatusFunc func(ctx context.Context, feedID int64, enabled bool) error

	// UpdateItemFeedbackFunc mocks the UpdateItemFeedback method.
	UpdateItemFeedbackFunc func(ctx context.Context, itemID int64, feedback string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateFeed holds details about calls to the CreateFeed method.
		CreateFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Feed is the feed argument value.
			Feed *domain.Feed
		}
		// DeleteFeed holds details about calls to the DeleteFeed method.
		DeleteFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
		}
		// GetActiveFeedNames holds details about calls to the GetActiveFeedNames method.
		GetActiveFeedNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
		}
		// GetAllFeeds holds details about calls to the GetAllFeeds method.
		GetAllFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetClassifiedItem holds details about calls to the GetClassifiedItem method.
		GetClassifiedItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
		}
		// GetClassifiedItems holds details about calls to the GetClassifiedItems method.
		GetClassifiedItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
			// Topic is the topic argument value.
			Topic string
			// Limit is the limit argument value.
			Limit int
		}
		// GetClassifiedItemsCount holds details about calls to the GetClassifiedItemsCount method.
		GetClassifiedItemsCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req domain.ArticlesRequest
		}
		// GetClassifiedItemsWithFilters holds details about calls to the GetClassifiedItemsWithFilters method.
		GetClassifiedItemsWithFilters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req domain.ArticlesRequest
		}
		// GetFeeds holds details about calls to the GetFeeds method.
		GetFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetItems holds details about calls to the GetItems method.
		GetItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// GetTopTopicsByScore holds details about calls to the GetTopTopicsByScore method.
		GetTopTopicsByScore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
			// Limit is the limit argument value.
			Limit int
		}
		// GetTopics holds details about calls to the GetTopics method.
		GetTopics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTopicsFiltered holds details about calls to the GetTopicsFiltered method.
		GetTopicsFiltered []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
		}
		// UpdateFeed holds details about calls to the UpdateFeed method.
		UpdateFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// Title is the title argument value.
			Title string
			// FetchInterval is the fetchInterval argument value.
			FetchInterval int
		}
		// UpdateFeedStatus holds details about calls to the UpdateFeedStatus method.
		UpdateFeedStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// Enabled is the enabled argument value.
			Enabled bool
		}
		// UpdateItemFeedback holds details about calls to the UpdateItemFeedback method.
		UpdateItemFeedback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
			// Feedback is the feedback argument value.
			Feedback string
		}
	}
	lockCreateFeed                    sync.RWMutex
	lockDeleteFeed                    sync.RWMutex
	lockGetActiveFeedNames            sync.RWMutex
	lockGetAllFeeds                   sync.RWMutex
	lockGetClassifiedItem             sync.RWMutex
	lockGetClassifiedItems            sync.RWMutex
	lockGetClassifiedItemsCount       sync.RWMutex
	lockGetClassifiedItemsWithFilters sync.RWMutex
	lockGetFeeds                      sync.RWMutex
	lockGetItems                      sync.RWMutex
	lockGetTopTopicsByScore           sync.RWMutex
	lockGetTopics                     sync.RWMutex
	lockGetTopicsFiltered             sync.RWMutex
	lockUpdateFeed                    sync.RWMutex
	lockUpdateFeedStatus              sync.RWMutex
	lockUpdateItemFeedback            sync.RWMutex
}

// CreateFeed calls CreateFeedFunc.
func (mock *DatabaseMock) CreateFeed(ctx context.Context, feed *domain.Feed) error {
	if mock.CreateFeedFunc == nil {
		panic("DatabaseMock.CreateFeedFunc: method is nil but Database.CreateFeed was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Feed *domain.Feed
	}{
		Ctx:  ctx,
		Feed: feed,
	}
	mock.lockCreateFeed.Lock()
	mock.calls.CreateFeed = append(mock.calls.CreateFeed, callInfo)
	mock.lockCreateFeed.Unlock()
	return mock.CreateFeedFunc(ctx, feed)
}

// CreateFeedCalls gets all the calls that were made to CreateFeed.
// Check the length with:
//
//	len(mockedDatabase.CreateFeedCalls())
func (mock *DatabaseMock) CreateFeedCalls() []struct {
	Ctx  context.Context
	Feed *domain.Feed
} {
	var calls []struct {
		Ctx  context.Context
		Feed *domain.Feed
	}
	mock.lockCreateFeed.RLock()
	calls = mock.calls.CreateFeed
	mock.lockCreateFeed.RUnlock()
	return calls
}

// DeleteFeed calls DeleteFeedFunc.
func (mock *DatabaseMock) DeleteFeed(ctx context.Context, feedID int64) error {
	if mock.DeleteFeedFunc == nil {
		panic("DatabaseMock.DeleteFeedFunc: method is nil but Database.DeleteFeed was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
	}{
		Ctx:    ctx,
		FeedID: feedID,
	}
	mock.lockDeleteFeed.Lock()
	mock.calls.DeleteFeed = append(mock.calls.DeleteFeed, callInfo)
	mock.lockDeleteFeed.Unlock()
	return mock.DeleteFeedFunc(ctx, feedID)
}

// DeleteFeedCalls gets all the calls that were made to DeleteFeed.
// Check the length with:
//
//	len(mockedDatabase.DeleteFeedCalls())
func (mock *DatabaseMock) DeleteFeedCalls() []struct {
	Ctx    context.Context
	FeedID int64
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
	}
	mock.lockDeleteFeed.RLock()
	calls = mock.calls.DeleteFeed
	mock.lockDeleteFeed.RUnlock()
	return calls
}

// GetActiveFeedNames calls GetActiveFeedNamesFunc.
func (mock *DatabaseMock) GetActiveFeedNames(ctx context.Context, minScore float64) ([]string, error) {
	if mock.GetActiveFeedNamesFunc == nil {
		panic("DatabaseMock.GetActiveFeedNamesFunc: method is nil but Database.GetActiveFeedNames was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
	}{
		Ctx:      ctx,
		MinScore: minScore,
	}
	mock.lockGetActiveFeedNames.Lock()
	mock.calls.GetActiveFeedNames = append(mock.calls.GetActiveFeedNames, callInfo)
	mock.lockGetActiveFeedNames.Unlock()
	return mock.GetActiveFeedNamesFunc(ctx, minScore)
}

// GetActiveFeedNamesCalls gets all the calls that were made to GetActiveFeedNames.
// Check the length with:
//
//	len(mockedDatabase.GetActiveFeedNamesCalls())
func (mock *DatabaseMock) GetActiveFeedNamesCalls() []struct {
	Ctx      context.Context
	MinScore float64
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
	}
	mock.lockGetActiveFeedNames.RLock()
	calls = mock.calls.GetActiveFeedNames
	mock.lockGetActiveFeedNames.RUnlock()
	return calls
}

// GetAllFeeds calls GetAllFeedsFunc.
func (mock *DatabaseMock) GetAllFeeds(ctx context.Context) ([]domain.Feed, error) {
	if mock.GetAllFeedsFunc == nil {
		panic("DatabaseMock.GetAllFeedsFunc: method is nil but Database.GetAllFeeds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllFeeds.Lock()
	mock.calls.GetAllFeeds = append(mock.calls.GetAllFeeds, callInfo)
	mock.lockGetAllFeeds.Unlock()
	return mock.GetAllFeedsFunc(ctx)
}

// GetAllFeedsCalls gets all the calls that were made to GetAllFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetAllFeedsCalls())
func (mock *DatabaseMock) GetAllFeedsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllFeeds.RLock()
	calls = mock.calls.GetAllFeeds
	mock.lockGetAllFeeds.RUnlock()
	return calls
}

// GetClassifiedItem calls GetClassifiedItemFunc.
func (mock *DatabaseMock) GetClassifiedItem(ctx context.Context, itemID int64) (*domain.ItemWithClassification, error) {
	if mock.GetClassifiedItemFunc == nil {
		panic("DatabaseMock.GetClassifiedItemFunc: method is nil but Database.GetClassifiedItem was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemID int64
	}{
		Ctx:    ctx,
		ItemID: itemID,
	}
	mock.lockGetClassifiedItem.Lock()
	mock.calls.GetClassifiedItem = append(mock.calls.GetClassifiedItem, callInfo)
	mock.lockGetClassifiedItem.Unlock()
	return mock.GetClassifiedItemFunc(ctx, itemID)
}

// GetClassifiedItemCalls gets all the calls that were made to GetClassifiedItem.
// Check the length with:
//
//	len(mockedDatabase.GetClassifiedItemCalls())
func (mock *DatabaseMock) GetClassifiedItemCalls() []struct {
	Ctx    context.Context
	ItemID int64
} {
	var calls []struct {
		Ctx    context.Context
		ItemID int64
	}
	mock.lockGetClassifiedItem.RLock()
	calls = mock.calls.GetClassifiedItem
	mock.lockGetClassifiedItem.RUnlock()
	return calls
}

// GetClassifiedItems calls GetClassifiedItemsFunc.
func (mock *DatabaseMock) GetClassifiedItems(ctx context.Context, minScore float64, topic string, limit int) ([]domain.ItemWithClassification, error) {
	if mock.GetClassifiedItemsFunc == nil {
		panic("DatabaseMock.GetClassifiedItemsFunc: method is nil but Database.GetClassifiedItems was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
		Topic    string
		Limit    int
	}{
		Ctx:      ctx,
		MinScore: minScore,
		Topic:    topic,
		Limit:    limit,
	}
	mock.lockGetClassifiedItems.Lock()
	mock.calls.GetClassifiedItems = append(mock.calls.GetClassifiedItems, callInfo)
	mock.lockGetClassifiedItems.Unlock()
	return mock.GetClassifiedItemsFunc(ctx, minScore, topic, limit)
}

// GetClassifiedItemsCalls gets all the calls that were made to GetClassifiedItems.
// Check the length with:
//
//	len(mockedDatabase.GetClassifiedItemsCalls())
func (mock *DatabaseMock) GetClassifiedItemsCalls() []struct {
	Ctx      context.Context
	MinScore float64
	Topic    string
	Limit    int
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
		Topic    string
		Limit    int
	}
	mock.lockGetClassifiedItems.RLock()
	calls = mock.calls.GetClassifiedItems
	mock.lockGetClassifiedItems.RUnlock()
	return calls
}

// GetClassifiedItemsCount calls GetClassifiedItemsCountFunc.
func (mock *DatabaseMock) GetClassifiedItemsCount(ctx context.Context, req domain.ArticlesRequest) (int, error) {
	if mock.GetClassifiedItemsCountFunc == nil {
		panic("DatabaseMock.GetClassifiedItemsCountFunc: method is nil but Database.GetClassifiedItemsCount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req domain.ArticlesRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetClassifiedItemsCount.Lock()
	mock.calls.GetClassifiedItemsCount = append(mock.calls.GetClassifiedItemsCount, callInfo)
	mock.lockGetClassifiedItemsCount.Unlock()
	return mock.GetClassifiedItemsCountFunc(ctx, req)
}

// GetClassifiedItemsCountCalls gets all the calls that were made to GetClassifiedItemsCount.
// Check the length with:
//
//	len(mockedDatabase.GetClassifiedItemsCountCalls())
func (mock *DatabaseMock) GetClassifiedItemsCountCalls() []struct {
	Ctx context.Context
	Req domain.ArticlesRequest
} {
	var calls []struct {
		Ctx context.Context
		Req domain.ArticlesRequest
	}
	mock.lockGetClassifiedItemsCount.RLock()
	calls = mock.calls.GetClassifiedItemsCount
	mock.lockGetClassifiedItemsCount.RUnlock()
	return calls
}

// GetClassifiedItemsWithFilters calls GetClassifiedItemsWithFiltersFunc.
func (mock *DatabaseMock) GetClassifiedItemsWithFilters(ctx context.Context, req domain.ArticlesRequest) ([]domain.ItemWithClassification, error) {
	if mock.GetClassifiedItemsWithFiltersFunc == nil {
		panic("DatabaseMock.GetClassifiedItemsWithFiltersFunc: method is nil but Database.GetClassifiedItemsWithFilters was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req domain.ArticlesRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetClassifiedItemsWithFilters.Lock()
	mock.calls.GetClassifiedItemsWithFilters = append(mock.calls.GetClassifiedItemsWithFilters, callInfo)
	mock.lockGetClassifiedItemsWithFilters.Unlock()
	return mock.GetClassifiedItemsWithFiltersFunc(ctx, req)
}

// GetClassifiedItemsWithFiltersCalls gets all the calls that were made to GetClassifiedItemsWithFilters.
// Check the length with:
//
//	len(mockedDatabase.GetClassifiedItemsWithFiltersCalls())
func (mock *DatabaseMock) GetClassifiedItemsWithFiltersCalls() []struct {
	Ctx context.Context
	Req domain.ArticlesRequest
} {
	var calls []struct {
		Ctx context.Context
		Req domain.ArticlesRequest
	}
	mock.lockGetClassifiedItemsWithFilters.RLock()
	calls = mock.calls.GetClassifiedItemsWithFilters
	mock.lockGetClassifiedItemsWithFilters.RUnlock()
	return calls
}

// GetFeeds calls GetFeedsFunc.
func (mock *DatabaseMock) GetFeeds(ctx context.Context) ([]domain.Feed, error) {
	if mock.GetFeedsFunc == nil {
		panic("DatabaseMock.GetFeedsFunc: method is nil but Database.GetFeeds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetFeeds.Lock()
	mock.calls.GetFeeds = append(mock.calls.GetFeeds, callInfo)
	mock.lockGetFeeds.Unlock()
	return mock.GetFeedsFunc(ctx)
}

// GetFeedsCalls gets all the calls that were made to GetFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetFeedsCalls())
func (mock *DatabaseMock) GetFeedsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetFeeds.RLock()
	calls = mock.calls.GetFeeds
	mock.lockGetFeeds.RUnlock()
	return calls
}

// GetItems calls GetItemsFunc.
func (mock *DatabaseMock) GetItems(ctx context.Context, limit int, offset int) ([]domain.Item, error) {
	if mock.GetItemsFunc == nil {
		panic("DatabaseMock.GetItemsFunc: method is nil but Database.GetItems was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetItems.Lock()
	mock.calls.GetItems = append(mock.calls.GetItems, callInfo)
	mock.lockGetItems.Unlock()
	return mock.GetItemsFunc(ctx, limit, offset)
}

// GetItemsCalls gets all the calls that were made to GetItems.
// Check the length with:
//
//	len(mockedDatabase.GetItemsCalls())
func (mock *DatabaseMock) GetItemsCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetItems.RLock()
	calls = mock.calls.GetItems
	mock.lockGetItems.RUnlock()
	return calls
}

// GetTopTopicsByScore calls GetTopTopicsByScoreFunc.
func (mock *DatabaseMock) GetTopTopicsByScore(ctx context.Context, minScore float64, limit int) ([]domain.TopicWithScore, error) {
	if mock.GetTopTopicsByScoreFunc == nil {
		panic("DatabaseMock.GetTopTopicsByScoreFunc: method is nil but Database.GetTopTopicsByScore was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
		Limit    int
	}{
		Ctx:      ctx,
		MinScore: minScore,
		Limit:    limit,
	}
	mock.lockGetTopTopicsByScore.Lock()
	mock.calls.GetTopTopicsByScore = append(mock.calls.GetTopTopicsByScore, callInfo)
	mock.lockGetTopTopicsByScore.Unlock()
	return mock.GetTopTopicsByScoreFunc(ctx, minScore, limit)
}

// GetTopTopicsByScoreCalls gets all the calls that were made to GetTopTopicsByScore.
// Check the length with:
//
//	len(mockedDatabase.GetTopTopicsByScoreCalls())
func (mock *DatabaseMock) GetTopTopicsByScoreCalls() []struct {
	Ctx      context.Context
	MinScore float64
	Limit    int
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
		Limit    int
	}
	mock.lockGetTopTopicsByScore.RLock()
	calls = mock.calls.GetTopTopicsByScore
	mock.lockGetTopTopicsByScore.RUnlock()
	return calls
}

// GetTopics calls GetTopicsFunc.
func (mock *DatabaseMock) GetTopics(ctx context.Context) ([]string, error) {
	if mock.GetTopicsFunc == nil {
		panic("DatabaseMock.GetTopicsFunc: method is nil but Database.GetTopics was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTopics.Lock()
	mock.calls.GetTopics = append(mock.calls.GetTopics, callInfo)
	mock.lockGetTopics.Unlock()
	return mock.GetTopicsFunc(ctx)
}

// GetTopicsCalls gets all the calls that were made to GetTopics.
// Check the length with:
//
//	len(mockedDatabase.GetTopicsCalls())
func (mock *DatabaseMock) GetTopicsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTopics.RLock()
	calls = mock.calls.GetTopics
	mock.lockGetTopics.RUnlock()
	return calls
}

// GetTopicsFiltered calls GetTopicsFilteredFunc.
func (mock *DatabaseMock) GetTopicsFiltered(ctx context.Context, minScore float64) ([]string, error) {
	if mock.GetTopicsFilteredFunc == nil {
		panic("DatabaseMock.GetTopicsFilteredFunc: method is nil but Database.GetTopicsFiltered was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
	}{
		Ctx:      ctx,
		MinScore: minScore,
	}
	mock.lockGetTopicsFiltered.Lock()
	mock.calls.GetTopicsFiltered = append(mock.calls.GetTopicsFiltered, callInfo)
	mock.lockGetTopicsFiltered.Unlock()
	return mock.GetTopicsFilteredFunc(ctx, minScore)
}

// GetTopicsFilteredCalls gets all the calls that were made to GetTopicsFiltered.
// Check the length with:
//
//	len(mockedDatabase.GetTopicsFilteredCalls())
func (mock *DatabaseMock) GetTopicsFilteredCalls() []struct {
	Ctx      context.Context
	MinScore float64
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
	}
	mock.lockGetTopicsFiltered.RLock()
	calls = mock.calls.GetTopicsFiltered
	mock.lockGetTopicsFiltered.RUnlock()
	return calls
}

// UpdateFeed calls UpdateFeedFunc.
func (mock *DatabaseMock) UpdateFeed(ctx context.Context, feedID int64, title string, fetchInterval int) error {
	if mock.UpdateFeedFunc == nil {
		panic("DatabaseMock.UpdateFeedFunc: method is nil but Database.UpdateFeed was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		FeedID        int64
		Title         string
		FetchInterval int
	}{
		Ctx:           ctx,
		FeedID:        feedID,
		Title:         title,
		FetchInterval: fetchInterval,
	}
	mock.lockUpdateFeed.Lock()
	mock.calls.UpdateFeed = append(mock.calls.UpdateFeed, callInfo)
	mock.lockUpdateFeed.Unlock()
	return mock.UpdateFeedFunc(ctx, feedID, title, fetchInterval)
}

// UpdateFeedCalls gets all the calls that were made to UpdateFeed.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedCalls())
func (mock *DatabaseMock) UpdateFeedCalls() []struct {
	Ctx           context.Context
	FeedID        int64
	Title         string
	FetchInterval int
} {
	var calls []struct {
		Ctx           context.Context
		FeedID        int64
		Title         string
		FetchInterval int
	}
	mock.lockUpdateFeed.RLock()
	calls = mock.calls.UpdateFeed
	mock.lockUpdateFeed.RUnlock()
	return calls
}

// UpdateFeedStatus calls UpdateFeedStatusFunc.
func (mock *DatabaseMock) UpdateFeedStatus(ctx context.Context, feedID int64, enabled bool) error {
	if mock.UpdateFeedStatusFunc == nil {
		panic("DatabaseMock.UpdateFeedStatusFunc: method is nil but Database.UpdateFeedStatus was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FeedID  int64
		Enabled bool
	}{
		Ctx:     ctx,
		FeedID:  feedID,
		Enabled: enabled,
	}
	mock.lockUpdateFeedStatus.Lock()
	mock.calls.UpdateFeedStatus = append(mock.calls.UpdateFeedStatus, callInfo)
	mock.lockUpdateFeedStatus.Unlock()
	return mock.UpdateFeedStatusFunc(ctx, feedID, enabled)
}

// UpdateFeedStatusCalls gets all the calls that were made to UpdateFeedStatus.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedStatusCalls())
func (mock *DatabaseMock) UpdateFeedStatusCalls() []struct {
	Ctx     context.Context
	FeedID  int64
	Enabled bool
} {
	var calls []struct {
		Ctx     context.Context
		FeedID  int64
		Enabled bool
	}
	mock.lockUpdateFeedStatus.RLock()
	calls = mock.calls.UpdateFeedStatus
	mock.lockUpdateFeedStatus.RUnlock()
	return calls
}

// UpdateItemFeedback calls UpdateItemFeedbackFunc.
func (mock *DatabaseMock) UpdateItemFeedback(ctx context.Context, itemID int64, feedback string) error {
	if mock.UpdateItemFeedbackFunc == nil {
		panic("DatabaseMock.UpdateItemFeedbackFunc: method is nil but Database.UpdateItemFeedback was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ItemID   int64
		Feedback string
	}{
		Ctx:      ctx,
		ItemID:   itemID,
		Feedback: feedback,
	}
	mock.lockUpdateItemFeedback.Lock()
	mock.calls.UpdateItemFeedback = append(mock.calls.UpdateItemFeedback, callInfo)
	mock.lockUpdateItemFeedback.Unlock()
	return mock.UpdateItemFeedbackFunc(ctx, itemID, feedback)
}

// UpdateItemFeedbackCalls gets all the calls that were made to UpdateItemFeedback.
// Check the length with:
//
//	len(mockedDatabase.UpdateItemFeedbackCalls())
func (mock *DatabaseMock) UpdateItemFeedbackCalls() []struct {
	Ctx      context.Context
	ItemID   int64
	Feedback string
} {
	var calls []struct {
		Ctx      context.Context
		ItemID   int64
		Feedback string
	}
	mock.lockUpdateItemFeedback.RLock()
	calls = mock.calls.UpdateItemFeedback
	mock.lockUpdateItemFeedback.RUnlock()
	return calls
}
