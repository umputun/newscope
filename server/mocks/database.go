// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/db"
	"github.com/umputun/newscope/pkg/feed/types"
)

// DatabaseMock is a mock implementation of server.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked server.Database
//		mockedDatabase := &DatabaseMock{
//			CreateFeedFunc: func(ctx context.Context, feed *db.Feed) error {
//				panic("mock out the CreateFeed method")
//			},
//			DeleteFeedFunc: func(ctx context.Context, feedID int64) error {
//				panic("mock out the DeleteFeed method")
//			},
//			GetAllFeedsFunc: func(ctx context.Context) ([]db.Feed, error) {
//				panic("mock out the GetAllFeeds method")
//			},
//			GetClassifiedItemFunc: func(ctx context.Context, itemID int64) (*types.ItemWithClassification, error) {
//				panic("mock out the GetClassifiedItem method")
//			},
//			GetClassifiedItemsFunc: func(ctx context.Context, minScore float64, topic string, limit int) ([]types.ItemWithClassification, error) {
//				panic("mock out the GetClassifiedItems method")
//			},
//			GetFeedsFunc: func(ctx context.Context) ([]types.Feed, error) {
//				panic("mock out the GetFeeds method")
//			},
//			GetItemsFunc: func(ctx context.Context, limit int, offset int) ([]types.Item, error) {
//				panic("mock out the GetItems method")
//			},
//			GetTopicsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetTopics method")
//			},
//			UpdateFeedStatusFunc: func(ctx context.Context, feedID int64, enabled bool) error {
//				panic("mock out the UpdateFeedStatus method")
//			},
//			UpdateItemFeedbackFunc: func(ctx context.Context, itemID int64, feedback string) error {
//				panic("mock out the UpdateItemFeedback method")
//			},
//		}
//
//		// use mockedDatabase in code that requires server.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// CreateFeedFunc mocks the CreateFeed method.
	CreateFeedFunc func(ctx context.Context, feed *db.Feed) error

	// DeleteFeedFunc mocks the DeleteFeed method.
	DeleteFeedFunc func(ctx context.Context, feedID int64) error

	// GetAllFeedsFunc mocks the GetAllFeeds method.
	GetAllFeedsFunc func(ctx context.Context) ([]db.Feed, error)

	// GetClassifiedItemFunc mocks the GetClassifiedItem method.
	GetClassifiedItemFunc func(ctx context.Context, itemID int64) (*types.ItemWithClassification, error)

	// GetClassifiedItemsFunc mocks the GetClassifiedItems method.
	GetClassifiedItemsFunc func(ctx context.Context, minScore float64, topic string, limit int) ([]types.ItemWithClassification, error)

	// GetFeedsFunc mocks the GetFeeds method.
	GetFeedsFunc func(ctx context.Context) ([]types.Feed, error)

	// GetItemsFunc mocks the GetItems method.
	GetItemsFunc func(ctx context.Context, limit int, offset int) ([]types.Item, error)

	// GetTopicsFunc mocks the GetTopics method.
	GetTopicsFunc func(ctx context.Context) ([]string, error)

	// UpdateFeedStatusFunc mocks the UpdateFeedStatus method.
	UpdateFeedStatusFunc func(ctx context.Context, feedID int64, enabled bool) error

	// UpdateItemFeedbackFunc mocks the UpdateItemFeedback method.
	UpdateItemFeedbackFunc func(ctx context.Context, itemID int64, feedback string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateFeed holds details about calls to the CreateFeed method.
		CreateFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Feed is the feed argument value.
			Feed *db.Feed
		}
		// DeleteFeed holds details about calls to the DeleteFeed method.
		DeleteFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
		}
		// GetAllFeeds holds details about calls to the GetAllFeeds method.
		GetAllFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetClassifiedItem holds details about calls to the GetClassifiedItem method.
		GetClassifiedItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
		}
		// GetClassifiedItems holds details about calls to the GetClassifiedItems method.
		GetClassifiedItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
			// Topic is the topic argument value.
			Topic string
			// Limit is the limit argument value.
			Limit int
		}
		// GetFeeds holds details about calls to the GetFeeds method.
		GetFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetItems holds details about calls to the GetItems method.
		GetItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// GetTopics holds details about calls to the GetTopics method.
		GetTopics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateFeedStatus holds details about calls to the UpdateFeedStatus method.
		UpdateFeedStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// Enabled is the enabled argument value.
			Enabled bool
		}
		// UpdateItemFeedback holds details about calls to the UpdateItemFeedback method.
		UpdateItemFeedback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
			// Feedback is the feedback argument value.
			Feedback string
		}
	}
	lockCreateFeed         sync.RWMutex
	lockDeleteFeed         sync.RWMutex
	lockGetAllFeeds        sync.RWMutex
	lockGetClassifiedItem  sync.RWMutex
	lockGetClassifiedItems sync.RWMutex
	lockGetFeeds           sync.RWMutex
	lockGetItems           sync.RWMutex
	lockGetTopics          sync.RWMutex
	lockUpdateFeedStatus   sync.RWMutex
	lockUpdateItemFeedback sync.RWMutex
}

// CreateFeed calls CreateFeedFunc.
func (mock *DatabaseMock) CreateFeed(ctx context.Context, feed *db.Feed) error {
	if mock.CreateFeedFunc == nil {
		panic("DatabaseMock.CreateFeedFunc: method is nil but Database.CreateFeed was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Feed *db.Feed
	}{
		Ctx:  ctx,
		Feed: feed,
	}
	mock.lockCreateFeed.Lock()
	mock.calls.CreateFeed = append(mock.calls.CreateFeed, callInfo)
	mock.lockCreateFeed.Unlock()
	return mock.CreateFeedFunc(ctx, feed)
}

// CreateFeedCalls gets all the calls that were made to CreateFeed.
// Check the length with:
//
//	len(mockedDatabase.CreateFeedCalls())
func (mock *DatabaseMock) CreateFeedCalls() []struct {
	Ctx  context.Context
	Feed *db.Feed
} {
	var calls []struct {
		Ctx  context.Context
		Feed *db.Feed
	}
	mock.lockCreateFeed.RLock()
	calls = mock.calls.CreateFeed
	mock.lockCreateFeed.RUnlock()
	return calls
}

// DeleteFeed calls DeleteFeedFunc.
func (mock *DatabaseMock) DeleteFeed(ctx context.Context, feedID int64) error {
	if mock.DeleteFeedFunc == nil {
		panic("DatabaseMock.DeleteFeedFunc: method is nil but Database.DeleteFeed was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
	}{
		Ctx:    ctx,
		FeedID: feedID,
	}
	mock.lockDeleteFeed.Lock()
	mock.calls.DeleteFeed = append(mock.calls.DeleteFeed, callInfo)
	mock.lockDeleteFeed.Unlock()
	return mock.DeleteFeedFunc(ctx, feedID)
}

// DeleteFeedCalls gets all the calls that were made to DeleteFeed.
// Check the length with:
//
//	len(mockedDatabase.DeleteFeedCalls())
func (mock *DatabaseMock) DeleteFeedCalls() []struct {
	Ctx    context.Context
	FeedID int64
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
	}
	mock.lockDeleteFeed.RLock()
	calls = mock.calls.DeleteFeed
	mock.lockDeleteFeed.RUnlock()
	return calls
}

// GetAllFeeds calls GetAllFeedsFunc.
func (mock *DatabaseMock) GetAllFeeds(ctx context.Context) ([]db.Feed, error) {
	if mock.GetAllFeedsFunc == nil {
		panic("DatabaseMock.GetAllFeedsFunc: method is nil but Database.GetAllFeeds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllFeeds.Lock()
	mock.calls.GetAllFeeds = append(mock.calls.GetAllFeeds, callInfo)
	mock.lockGetAllFeeds.Unlock()
	return mock.GetAllFeedsFunc(ctx)
}

// GetAllFeedsCalls gets all the calls that were made to GetAllFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetAllFeedsCalls())
func (mock *DatabaseMock) GetAllFeedsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllFeeds.RLock()
	calls = mock.calls.GetAllFeeds
	mock.lockGetAllFeeds.RUnlock()
	return calls
}

// GetClassifiedItem calls GetClassifiedItemFunc.
func (mock *DatabaseMock) GetClassifiedItem(ctx context.Context, itemID int64) (*types.ItemWithClassification, error) {
	if mock.GetClassifiedItemFunc == nil {
		panic("DatabaseMock.GetClassifiedItemFunc: method is nil but Database.GetClassifiedItem was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemID int64
	}{
		Ctx:    ctx,
		ItemID: itemID,
	}
	mock.lockGetClassifiedItem.Lock()
	mock.calls.GetClassifiedItem = append(mock.calls.GetClassifiedItem, callInfo)
	mock.lockGetClassifiedItem.Unlock()
	return mock.GetClassifiedItemFunc(ctx, itemID)
}

// GetClassifiedItemCalls gets all the calls that were made to GetClassifiedItem.
// Check the length with:
//
//	len(mockedDatabase.GetClassifiedItemCalls())
func (mock *DatabaseMock) GetClassifiedItemCalls() []struct {
	Ctx    context.Context
	ItemID int64
} {
	var calls []struct {
		Ctx    context.Context
		ItemID int64
	}
	mock.lockGetClassifiedItem.RLock()
	calls = mock.calls.GetClassifiedItem
	mock.lockGetClassifiedItem.RUnlock()
	return calls
}

// GetClassifiedItems calls GetClassifiedItemsFunc.
func (mock *DatabaseMock) GetClassifiedItems(ctx context.Context, minScore float64, topic string, limit int) ([]types.ItemWithClassification, error) {
	if mock.GetClassifiedItemsFunc == nil {
		panic("DatabaseMock.GetClassifiedItemsFunc: method is nil but Database.GetClassifiedItems was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
		Topic    string
		Limit    int
	}{
		Ctx:      ctx,
		MinScore: minScore,
		Topic:    topic,
		Limit:    limit,
	}
	mock.lockGetClassifiedItems.Lock()
	mock.calls.GetClassifiedItems = append(mock.calls.GetClassifiedItems, callInfo)
	mock.lockGetClassifiedItems.Unlock()
	return mock.GetClassifiedItemsFunc(ctx, minScore, topic, limit)
}

// GetClassifiedItemsCalls gets all the calls that were made to GetClassifiedItems.
// Check the length with:
//
//	len(mockedDatabase.GetClassifiedItemsCalls())
func (mock *DatabaseMock) GetClassifiedItemsCalls() []struct {
	Ctx      context.Context
	MinScore float64
	Topic    string
	Limit    int
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
		Topic    string
		Limit    int
	}
	mock.lockGetClassifiedItems.RLock()
	calls = mock.calls.GetClassifiedItems
	mock.lockGetClassifiedItems.RUnlock()
	return calls
}

// GetFeeds calls GetFeedsFunc.
func (mock *DatabaseMock) GetFeeds(ctx context.Context) ([]types.Feed, error) {
	if mock.GetFeedsFunc == nil {
		panic("DatabaseMock.GetFeedsFunc: method is nil but Database.GetFeeds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetFeeds.Lock()
	mock.calls.GetFeeds = append(mock.calls.GetFeeds, callInfo)
	mock.lockGetFeeds.Unlock()
	return mock.GetFeedsFunc(ctx)
}

// GetFeedsCalls gets all the calls that were made to GetFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetFeedsCalls())
func (mock *DatabaseMock) GetFeedsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetFeeds.RLock()
	calls = mock.calls.GetFeeds
	mock.lockGetFeeds.RUnlock()
	return calls
}

// GetItems calls GetItemsFunc.
func (mock *DatabaseMock) GetItems(ctx context.Context, limit int, offset int) ([]types.Item, error) {
	if mock.GetItemsFunc == nil {
		panic("DatabaseMock.GetItemsFunc: method is nil but Database.GetItems was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetItems.Lock()
	mock.calls.GetItems = append(mock.calls.GetItems, callInfo)
	mock.lockGetItems.Unlock()
	return mock.GetItemsFunc(ctx, limit, offset)
}

// GetItemsCalls gets all the calls that were made to GetItems.
// Check the length with:
//
//	len(mockedDatabase.GetItemsCalls())
func (mock *DatabaseMock) GetItemsCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetItems.RLock()
	calls = mock.calls.GetItems
	mock.lockGetItems.RUnlock()
	return calls
}

// GetTopics calls GetTopicsFunc.
func (mock *DatabaseMock) GetTopics(ctx context.Context) ([]string, error) {
	if mock.GetTopicsFunc == nil {
		panic("DatabaseMock.GetTopicsFunc: method is nil but Database.GetTopics was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTopics.Lock()
	mock.calls.GetTopics = append(mock.calls.GetTopics, callInfo)
	mock.lockGetTopics.Unlock()
	return mock.GetTopicsFunc(ctx)
}

// GetTopicsCalls gets all the calls that were made to GetTopics.
// Check the length with:
//
//	len(mockedDatabase.GetTopicsCalls())
func (mock *DatabaseMock) GetTopicsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTopics.RLock()
	calls = mock.calls.GetTopics
	mock.lockGetTopics.RUnlock()
	return calls
}

// UpdateFeedStatus calls UpdateFeedStatusFunc.
func (mock *DatabaseMock) UpdateFeedStatus(ctx context.Context, feedID int64, enabled bool) error {
	if mock.UpdateFeedStatusFunc == nil {
		panic("DatabaseMock.UpdateFeedStatusFunc: method is nil but Database.UpdateFeedStatus was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FeedID  int64
		Enabled bool
	}{
		Ctx:     ctx,
		FeedID:  feedID,
		Enabled: enabled,
	}
	mock.lockUpdateFeedStatus.Lock()
	mock.calls.UpdateFeedStatus = append(mock.calls.UpdateFeedStatus, callInfo)
	mock.lockUpdateFeedStatus.Unlock()
	return mock.UpdateFeedStatusFunc(ctx, feedID, enabled)
}

// UpdateFeedStatusCalls gets all the calls that were made to UpdateFeedStatus.
// Check the length with:
//
//	len(mockedDatabase.UpdateFeedStatusCalls())
func (mock *DatabaseMock) UpdateFeedStatusCalls() []struct {
	Ctx     context.Context
	FeedID  int64
	Enabled bool
} {
	var calls []struct {
		Ctx     context.Context
		FeedID  int64
		Enabled bool
	}
	mock.lockUpdateFeedStatus.RLock()
	calls = mock.calls.UpdateFeedStatus
	mock.lockUpdateFeedStatus.RUnlock()
	return calls
}

// UpdateItemFeedback calls UpdateItemFeedbackFunc.
func (mock *DatabaseMock) UpdateItemFeedback(ctx context.Context, itemID int64, feedback string) error {
	if mock.UpdateItemFeedbackFunc == nil {
		panic("DatabaseMock.UpdateItemFeedbackFunc: method is nil but Database.UpdateItemFeedback was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ItemID   int64
		Feedback string
	}{
		Ctx:      ctx,
		ItemID:   itemID,
		Feedback: feedback,
	}
	mock.lockUpdateItemFeedback.Lock()
	mock.calls.UpdateItemFeedback = append(mock.calls.UpdateItemFeedback, callInfo)
	mock.lockUpdateItemFeedback.Unlock()
	return mock.UpdateItemFeedbackFunc(ctx, itemID, feedback)
}

// UpdateItemFeedbackCalls gets all the calls that were made to UpdateItemFeedback.
// Check the length with:
//
//	len(mockedDatabase.UpdateItemFeedbackCalls())
func (mock *DatabaseMock) UpdateItemFeedbackCalls() []struct {
	Ctx      context.Context
	ItemID   int64
	Feedback string
} {
	var calls []struct {
		Ctx      context.Context
		ItemID   int64
		Feedback string
	}
	mock.lockUpdateItemFeedback.RLock()
	calls = mock.calls.UpdateItemFeedback
	mock.lockUpdateItemFeedback.RUnlock()
	return calls
}
