// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/feed/types"
)

// DatabaseMock is a mock implementation of server.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked server.Database
//		mockedDatabase := &DatabaseMock{
//			GetFeedsFunc: func(ctx context.Context) ([]types.Feed, error) {
//				panic("mock out the GetFeeds method")
//			},
//			GetItemsFunc: func(ctx context.Context, limit int, offset int) ([]types.Item, error) {
//				panic("mock out the GetItems method")
//			},
//		}
//
//		// use mockedDatabase in code that requires server.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// GetFeedsFunc mocks the GetFeeds method.
	GetFeedsFunc func(ctx context.Context) ([]types.Feed, error)

	// GetItemsFunc mocks the GetItems method.
	GetItemsFunc func(ctx context.Context, limit int, offset int) ([]types.Item, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetFeeds holds details about calls to the GetFeeds method.
		GetFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetItems holds details about calls to the GetItems method.
		GetItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
	}
	lockGetFeeds sync.RWMutex
	lockGetItems sync.RWMutex
}

// GetFeeds calls GetFeedsFunc.
func (mock *DatabaseMock) GetFeeds(ctx context.Context) ([]types.Feed, error) {
	if mock.GetFeedsFunc == nil {
		panic("DatabaseMock.GetFeedsFunc: method is nil but Database.GetFeeds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetFeeds.Lock()
	mock.calls.GetFeeds = append(mock.calls.GetFeeds, callInfo)
	mock.lockGetFeeds.Unlock()
	return mock.GetFeedsFunc(ctx)
}

// GetFeedsCalls gets all the calls that were made to GetFeeds.
// Check the length with:
//
//	len(mockedDatabase.GetFeedsCalls())
func (mock *DatabaseMock) GetFeedsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetFeeds.RLock()
	calls = mock.calls.GetFeeds
	mock.lockGetFeeds.RUnlock()
	return calls
}

// GetItems calls GetItemsFunc.
func (mock *DatabaseMock) GetItems(ctx context.Context, limit int, offset int) ([]types.Item, error) {
	if mock.GetItemsFunc == nil {
		panic("DatabaseMock.GetItemsFunc: method is nil but Database.GetItems was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetItems.Lock()
	mock.calls.GetItems = append(mock.calls.GetItems, callInfo)
	mock.lockGetItems.Unlock()
	return mock.GetItemsFunc(ctx, limit, offset)
}

// GetItemsCalls gets all the calls that were made to GetItems.
// Check the length with:
//
//	len(mockedDatabase.GetItemsCalls())
func (mock *DatabaseMock) GetItemsCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetItems.RLock()
	calls = mock.calls.GetItems
	mock.lockGetItems.RUnlock()
	return calls
}
