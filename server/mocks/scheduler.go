// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// SchedulerMock is a mock implementation of server.Scheduler.
//
//	func TestSomethingThatUsesScheduler(t *testing.T) {
//
//		// make and configure a mocked server.Scheduler
//		mockedScheduler := &SchedulerMock{
//			ExtractContentNowFunc: func(ctx context.Context, itemID int64) error {
//				panic("mock out the ExtractContentNow method")
//			},
//			TriggerPreferenceUpdateFunc: func()  {
//				panic("mock out the TriggerPreferenceUpdate method")
//			},
//			UpdateFeedNowFunc: func(ctx context.Context, feedID int64) error {
//				panic("mock out the UpdateFeedNow method")
//			},
//			UpdatePreferenceSummaryFunc: func(ctx context.Context) error {
//				panic("mock out the UpdatePreferenceSummary method")
//			},
//		}
//
//		// use mockedScheduler in code that requires server.Scheduler
//		// and then make assertions.
//
//	}
type SchedulerMock struct {
	// ExtractContentNowFunc mocks the ExtractContentNow method.
	ExtractContentNowFunc func(ctx context.Context, itemID int64) error

	// TriggerPreferenceUpdateFunc mocks the TriggerPreferenceUpdate method.
	TriggerPreferenceUpdateFunc func()

	// UpdateFeedNowFunc mocks the UpdateFeedNow method.
	UpdateFeedNowFunc func(ctx context.Context, feedID int64) error

	// UpdatePreferenceSummaryFunc mocks the UpdatePreferenceSummary method.
	UpdatePreferenceSummaryFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// ExtractContentNow holds details about calls to the ExtractContentNow method.
		ExtractContentNow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
		}
		// TriggerPreferenceUpdate holds details about calls to the TriggerPreferenceUpdate method.
		TriggerPreferenceUpdate []struct {
		}
		// UpdateFeedNow holds details about calls to the UpdateFeedNow method.
		UpdateFeedNow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
		}
		// UpdatePreferenceSummary holds details about calls to the UpdatePreferenceSummary method.
		UpdatePreferenceSummary []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockExtractContentNow       sync.RWMutex
	lockTriggerPreferenceUpdate sync.RWMutex
	lockUpdateFeedNow           sync.RWMutex
	lockUpdatePreferenceSummary sync.RWMutex
}

// ExtractContentNow calls ExtractContentNowFunc.
func (mock *SchedulerMock) ExtractContentNow(ctx context.Context, itemID int64) error {
	if mock.ExtractContentNowFunc == nil {
		panic("SchedulerMock.ExtractContentNowFunc: method is nil but Scheduler.ExtractContentNow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemID int64
	}{
		Ctx:    ctx,
		ItemID: itemID,
	}
	mock.lockExtractContentNow.Lock()
	mock.calls.ExtractContentNow = append(mock.calls.ExtractContentNow, callInfo)
	mock.lockExtractContentNow.Unlock()
	return mock.ExtractContentNowFunc(ctx, itemID)
}

// ExtractContentNowCalls gets all the calls that were made to ExtractContentNow.
// Check the length with:
//
//	len(mockedScheduler.ExtractContentNowCalls())
func (mock *SchedulerMock) ExtractContentNowCalls() []struct {
	Ctx    context.Context
	ItemID int64
} {
	var calls []struct {
		Ctx    context.Context
		ItemID int64
	}
	mock.lockExtractContentNow.RLock()
	calls = mock.calls.ExtractContentNow
	mock.lockExtractContentNow.RUnlock()
	return calls
}

// TriggerPreferenceUpdate calls TriggerPreferenceUpdateFunc.
func (mock *SchedulerMock) TriggerPreferenceUpdate() {
	if mock.TriggerPreferenceUpdateFunc == nil {
		panic("SchedulerMock.TriggerPreferenceUpdateFunc: method is nil but Scheduler.TriggerPreferenceUpdate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTriggerPreferenceUpdate.Lock()
	mock.calls.TriggerPreferenceUpdate = append(mock.calls.TriggerPreferenceUpdate, callInfo)
	mock.lockTriggerPreferenceUpdate.Unlock()
	mock.TriggerPreferenceUpdateFunc()
}

// TriggerPreferenceUpdateCalls gets all the calls that were made to TriggerPreferenceUpdate.
// Check the length with:
//
//	len(mockedScheduler.TriggerPreferenceUpdateCalls())
func (mock *SchedulerMock) TriggerPreferenceUpdateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTriggerPreferenceUpdate.RLock()
	calls = mock.calls.TriggerPreferenceUpdate
	mock.lockTriggerPreferenceUpdate.RUnlock()
	return calls
}

// UpdateFeedNow calls UpdateFeedNowFunc.
func (mock *SchedulerMock) UpdateFeedNow(ctx context.Context, feedID int64) error {
	if mock.UpdateFeedNowFunc == nil {
		panic("SchedulerMock.UpdateFeedNowFunc: method is nil but Scheduler.UpdateFeedNow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
	}{
		Ctx:    ctx,
		FeedID: feedID,
	}
	mock.lockUpdateFeedNow.Lock()
	mock.calls.UpdateFeedNow = append(mock.calls.UpdateFeedNow, callInfo)
	mock.lockUpdateFeedNow.Unlock()
	return mock.UpdateFeedNowFunc(ctx, feedID)
}

// UpdateFeedNowCalls gets all the calls that were made to UpdateFeedNow.
// Check the length with:
//
//	len(mockedScheduler.UpdateFeedNowCalls())
func (mock *SchedulerMock) UpdateFeedNowCalls() []struct {
	Ctx    context.Context
	FeedID int64
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
	}
	mock.lockUpdateFeedNow.RLock()
	calls = mock.calls.UpdateFeedNow
	mock.lockUpdateFeedNow.RUnlock()
	return calls
}

// UpdatePreferenceSummary calls UpdatePreferenceSummaryFunc.
func (mock *SchedulerMock) UpdatePreferenceSummary(ctx context.Context) error {
	if mock.UpdatePreferenceSummaryFunc == nil {
		panic("SchedulerMock.UpdatePreferenceSummaryFunc: method is nil but Scheduler.UpdatePreferenceSummary was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockUpdatePreferenceSummary.Lock()
	mock.calls.UpdatePreferenceSummary = append(mock.calls.UpdatePreferenceSummary, callInfo)
	mock.lockUpdatePreferenceSummary.Unlock()
	return mock.UpdatePreferenceSummaryFunc(ctx)
}

// UpdatePreferenceSummaryCalls gets all the calls that were made to UpdatePreferenceSummary.
// Check the length with:
//
//	len(mockedScheduler.UpdatePreferenceSummaryCalls())
func (mock *SchedulerMock) UpdatePreferenceSummaryCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockUpdatePreferenceSummary.RLock()
	calls = mock.calls.UpdatePreferenceSummary
	mock.lockUpdatePreferenceSummary.RUnlock()
	return calls
}
