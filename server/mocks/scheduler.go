// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// SchedulerMock is a mock implementation of server.Scheduler.
//
//	func TestSomethingThatUsesScheduler(t *testing.T) {
//
//		// make and configure a mocked server.Scheduler
//		mockedScheduler := &SchedulerMock{
//			ClassifyNowFunc: func(ctx context.Context) error {
//				panic("mock out the ClassifyNow method")
//			},
//			ExtractContentNowFunc: func(ctx context.Context, itemID int64) error {
//				panic("mock out the ExtractContentNow method")
//			},
//			UpdateFeedNowFunc: func(ctx context.Context, feedID int64) error {
//				panic("mock out the UpdateFeedNow method")
//			},
//		}
//
//		// use mockedScheduler in code that requires server.Scheduler
//		// and then make assertions.
//
//	}
type SchedulerMock struct {
	// ClassifyNowFunc mocks the ClassifyNow method.
	ClassifyNowFunc func(ctx context.Context) error

	// ExtractContentNowFunc mocks the ExtractContentNow method.
	ExtractContentNowFunc func(ctx context.Context, itemID int64) error

	// UpdateFeedNowFunc mocks the UpdateFeedNow method.
	UpdateFeedNowFunc func(ctx context.Context, feedID int64) error

	// calls tracks calls to the methods.
	calls struct {
		// ClassifyNow holds details about calls to the ClassifyNow method.
		ClassifyNow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ExtractContentNow holds details about calls to the ExtractContentNow method.
		ExtractContentNow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID int64
		}
		// UpdateFeedNow holds details about calls to the UpdateFeedNow method.
		UpdateFeedNow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
		}
	}
	lockClassifyNow       sync.RWMutex
	lockExtractContentNow sync.RWMutex
	lockUpdateFeedNow     sync.RWMutex
}

// ClassifyNow calls ClassifyNowFunc.
func (mock *SchedulerMock) ClassifyNow(ctx context.Context) error {
	if mock.ClassifyNowFunc == nil {
		panic("SchedulerMock.ClassifyNowFunc: method is nil but Scheduler.ClassifyNow was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClassifyNow.Lock()
	mock.calls.ClassifyNow = append(mock.calls.ClassifyNow, callInfo)
	mock.lockClassifyNow.Unlock()
	return mock.ClassifyNowFunc(ctx)
}

// ClassifyNowCalls gets all the calls that were made to ClassifyNow.
// Check the length with:
//
//	len(mockedScheduler.ClassifyNowCalls())
func (mock *SchedulerMock) ClassifyNowCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClassifyNow.RLock()
	calls = mock.calls.ClassifyNow
	mock.lockClassifyNow.RUnlock()
	return calls
}

// ExtractContentNow calls ExtractContentNowFunc.
func (mock *SchedulerMock) ExtractContentNow(ctx context.Context, itemID int64) error {
	if mock.ExtractContentNowFunc == nil {
		panic("SchedulerMock.ExtractContentNowFunc: method is nil but Scheduler.ExtractContentNow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemID int64
	}{
		Ctx:    ctx,
		ItemID: itemID,
	}
	mock.lockExtractContentNow.Lock()
	mock.calls.ExtractContentNow = append(mock.calls.ExtractContentNow, callInfo)
	mock.lockExtractContentNow.Unlock()
	return mock.ExtractContentNowFunc(ctx, itemID)
}

// ExtractContentNowCalls gets all the calls that were made to ExtractContentNow.
// Check the length with:
//
//	len(mockedScheduler.ExtractContentNowCalls())
func (mock *SchedulerMock) ExtractContentNowCalls() []struct {
	Ctx    context.Context
	ItemID int64
} {
	var calls []struct {
		Ctx    context.Context
		ItemID int64
	}
	mock.lockExtractContentNow.RLock()
	calls = mock.calls.ExtractContentNow
	mock.lockExtractContentNow.RUnlock()
	return calls
}

// UpdateFeedNow calls UpdateFeedNowFunc.
func (mock *SchedulerMock) UpdateFeedNow(ctx context.Context, feedID int64) error {
	if mock.UpdateFeedNowFunc == nil {
		panic("SchedulerMock.UpdateFeedNowFunc: method is nil but Scheduler.UpdateFeedNow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
	}{
		Ctx:    ctx,
		FeedID: feedID,
	}
	mock.lockUpdateFeedNow.Lock()
	mock.calls.UpdateFeedNow = append(mock.calls.UpdateFeedNow, callInfo)
	mock.lockUpdateFeedNow.Unlock()
	return mock.UpdateFeedNowFunc(ctx, feedID)
}

// UpdateFeedNowCalls gets all the calls that were made to UpdateFeedNow.
// Check the length with:
//
//	len(mockedScheduler.UpdateFeedNowCalls())
func (mock *SchedulerMock) UpdateFeedNowCalls() []struct {
	Ctx    context.Context
	FeedID int64
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
	}
	mock.lockUpdateFeedNow.RLock()
	calls = mock.calls.UpdateFeedNow
	mock.lockUpdateFeedNow.RUnlock()
	return calls
}
