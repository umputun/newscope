// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/umputun/newscope/pkg/domain"
)

// FeedRepoMock is a mock implementation of server.FeedRepo.
//
//	func TestSomethingThatUsesFeedRepo(t *testing.T) {
//
//		// make and configure a mocked server.FeedRepo
//		mockedFeedRepo := &FeedRepoMock{
//			CreateFeedFunc: func(ctx context.Context, feed *domain.Feed) error {
//				panic("mock out the CreateFeed method")
//			},
//			DeleteFeedFunc: func(ctx context.Context, feedID int64) error {
//				panic("mock out the DeleteFeed method")
//			},
//			GetActiveFeedNamesFunc: func(ctx context.Context, minScore float64) ([]string, error) {
//				panic("mock out the GetActiveFeedNames method")
//			},
//			GetFeedsFunc: func(ctx context.Context, enabledOnly bool) ([]domain.Feed, error) {
//				panic("mock out the GetFeeds method")
//			},
//			UpdateFeedStatusFunc: func(ctx context.Context, feedID int64, enabled bool) error {
//				panic("mock out the UpdateFeedStatus method")
//			},
//		}
//
//		// use mockedFeedRepo in code that requires server.FeedRepo
//		// and then make assertions.
//
//	}
type FeedRepoMock struct {
	// CreateFeedFunc mocks the CreateFeed method.
	CreateFeedFunc func(ctx context.Context, feed *domain.Feed) error

	// DeleteFeedFunc mocks the DeleteFeed method.
	DeleteFeedFunc func(ctx context.Context, feedID int64) error

	// GetActiveFeedNamesFunc mocks the GetActiveFeedNames method.
	GetActiveFeedNamesFunc func(ctx context.Context, minScore float64) ([]string, error)

	// GetFeedsFunc mocks the GetFeeds method.
	GetFeedsFunc func(ctx context.Context, enabledOnly bool) ([]domain.Feed, error)

	// UpdateFeedStatusFunc mocks the UpdateFeedStatus method.
	UpdateFeedStatusFunc func(ctx context.Context, feedID int64, enabled bool) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateFeed holds details about calls to the CreateFeed method.
		CreateFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Feed is the feed argument value.
			Feed *domain.Feed
		}
		// DeleteFeed holds details about calls to the DeleteFeed method.
		DeleteFeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
		}
		// GetActiveFeedNames holds details about calls to the GetActiveFeedNames method.
		GetActiveFeedNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MinScore is the minScore argument value.
			MinScore float64
		}
		// GetFeeds holds details about calls to the GetFeeds method.
		GetFeeds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EnabledOnly is the enabledOnly argument value.
			EnabledOnly bool
		}
		// UpdateFeedStatus holds details about calls to the UpdateFeedStatus method.
		UpdateFeedStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FeedID is the feedID argument value.
			FeedID int64
			// Enabled is the enabled argument value.
			Enabled bool
		}
	}
	lockCreateFeed         sync.RWMutex
	lockDeleteFeed         sync.RWMutex
	lockGetActiveFeedNames sync.RWMutex
	lockGetFeeds           sync.RWMutex
	lockUpdateFeedStatus   sync.RWMutex
}

// CreateFeed calls CreateFeedFunc.
func (mock *FeedRepoMock) CreateFeed(ctx context.Context, feed *domain.Feed) error {
	if mock.CreateFeedFunc == nil {
		panic("FeedRepoMock.CreateFeedFunc: method is nil but FeedRepo.CreateFeed was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Feed *domain.Feed
	}{
		Ctx:  ctx,
		Feed: feed,
	}
	mock.lockCreateFeed.Lock()
	mock.calls.CreateFeed = append(mock.calls.CreateFeed, callInfo)
	mock.lockCreateFeed.Unlock()
	return mock.CreateFeedFunc(ctx, feed)
}

// CreateFeedCalls gets all the calls that were made to CreateFeed.
// Check the length with:
//
//	len(mockedFeedRepo.CreateFeedCalls())
func (mock *FeedRepoMock) CreateFeedCalls() []struct {
	Ctx  context.Context
	Feed *domain.Feed
} {
	var calls []struct {
		Ctx  context.Context
		Feed *domain.Feed
	}
	mock.lockCreateFeed.RLock()
	calls = mock.calls.CreateFeed
	mock.lockCreateFeed.RUnlock()
	return calls
}

// DeleteFeed calls DeleteFeedFunc.
func (mock *FeedRepoMock) DeleteFeed(ctx context.Context, feedID int64) error {
	if mock.DeleteFeedFunc == nil {
		panic("FeedRepoMock.DeleteFeedFunc: method is nil but FeedRepo.DeleteFeed was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FeedID int64
	}{
		Ctx:    ctx,
		FeedID: feedID,
	}
	mock.lockDeleteFeed.Lock()
	mock.calls.DeleteFeed = append(mock.calls.DeleteFeed, callInfo)
	mock.lockDeleteFeed.Unlock()
	return mock.DeleteFeedFunc(ctx, feedID)
}

// DeleteFeedCalls gets all the calls that were made to DeleteFeed.
// Check the length with:
//
//	len(mockedFeedRepo.DeleteFeedCalls())
func (mock *FeedRepoMock) DeleteFeedCalls() []struct {
	Ctx    context.Context
	FeedID int64
} {
	var calls []struct {
		Ctx    context.Context
		FeedID int64
	}
	mock.lockDeleteFeed.RLock()
	calls = mock.calls.DeleteFeed
	mock.lockDeleteFeed.RUnlock()
	return calls
}

// GetActiveFeedNames calls GetActiveFeedNamesFunc.
func (mock *FeedRepoMock) GetActiveFeedNames(ctx context.Context, minScore float64) ([]string, error) {
	if mock.GetActiveFeedNamesFunc == nil {
		panic("FeedRepoMock.GetActiveFeedNamesFunc: method is nil but FeedRepo.GetActiveFeedNames was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MinScore float64
	}{
		Ctx:      ctx,
		MinScore: minScore,
	}
	mock.lockGetActiveFeedNames.Lock()
	mock.calls.GetActiveFeedNames = append(mock.calls.GetActiveFeedNames, callInfo)
	mock.lockGetActiveFeedNames.Unlock()
	return mock.GetActiveFeedNamesFunc(ctx, minScore)
}

// GetActiveFeedNamesCalls gets all the calls that were made to GetActiveFeedNames.
// Check the length with:
//
//	len(mockedFeedRepo.GetActiveFeedNamesCalls())
func (mock *FeedRepoMock) GetActiveFeedNamesCalls() []struct {
	Ctx      context.Context
	MinScore float64
} {
	var calls []struct {
		Ctx      context.Context
		MinScore float64
	}
	mock.lockGetActiveFeedNames.RLock()
	calls = mock.calls.GetActiveFeedNames
	mock.lockGetActiveFeedNames.RUnlock()
	return calls
}

// GetFeeds calls GetFeedsFunc.
func (mock *FeedRepoMock) GetFeeds(ctx context.Context, enabledOnly bool) ([]domain.Feed, error) {
	if mock.GetFeedsFunc == nil {
		panic("FeedRepoMock.GetFeedsFunc: method is nil but FeedRepo.GetFeeds was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EnabledOnly bool
	}{
		Ctx:         ctx,
		EnabledOnly: enabledOnly,
	}
	mock.lockGetFeeds.Lock()
	mock.calls.GetFeeds = append(mock.calls.GetFeeds, callInfo)
	mock.lockGetFeeds.Unlock()
	return mock.GetFeedsFunc(ctx, enabledOnly)
}

// GetFeedsCalls gets all the calls that were made to GetFeeds.
// Check the length with:
//
//	len(mockedFeedRepo.GetFeedsCalls())
func (mock *FeedRepoMock) GetFeedsCalls() []struct {
	Ctx         context.Context
	EnabledOnly bool
} {
	var calls []struct {
		Ctx         context.Context
		EnabledOnly bool
	}
	mock.lockGetFeeds.RLock()
	calls = mock.calls.GetFeeds
	mock.lockGetFeeds.RUnlock()
	return calls
}

// UpdateFeedStatus calls UpdateFeedStatusFunc.
func (mock *FeedRepoMock) UpdateFeedStatus(ctx context.Context, feedID int64, enabled bool) error {
	if mock.UpdateFeedStatusFunc == nil {
		panic("FeedRepoMock.UpdateFeedStatusFunc: method is nil but FeedRepo.UpdateFeedStatus was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FeedID  int64
		Enabled bool
	}{
		Ctx:     ctx,
		FeedID:  feedID,
		Enabled: enabled,
	}
	mock.lockUpdateFeedStatus.Lock()
	mock.calls.UpdateFeedStatus = append(mock.calls.UpdateFeedStatus, callInfo)
	mock.lockUpdateFeedStatus.Unlock()
	return mock.UpdateFeedStatusFunc(ctx, feedID, enabled)
}

// UpdateFeedStatusCalls gets all the calls that were made to UpdateFeedStatus.
// Check the length with:
//
//	len(mockedFeedRepo.UpdateFeedStatusCalls())
func (mock *FeedRepoMock) UpdateFeedStatusCalls() []struct {
	Ctx     context.Context
	FeedID  int64
	Enabled bool
} {
	var calls []struct {
		Ctx     context.Context
		FeedID  int64
		Enabled bool
	}
	mock.lockUpdateFeedStatus.RLock()
	calls = mock.calls.UpdateFeedStatus
	mock.lockUpdateFeedStatus.RUnlock()
	return calls
}
